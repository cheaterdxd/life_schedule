import tkinter as tk
from tkinter import simpledialog, messagebox, PhotoImage
import time, threading
import os
import sys # D√πng ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n n·∫øu ƒë√≥ng g√≥i th√†nh exe
import datetime # Th√™m th∆∞ vi·ªán datetime ƒë·ªÉ x·ª≠ l√Ω ng√†y th√°ng
import json
# Th∆∞ vi·ªán b√™n ngo√†i (c·∫ßn c√†i ƒë·∫∑t: pip install openpyxl playsound3)
try:
    from openpyxl import Workbook, load_workbook
except ImportError:
    messagebox.showerror("L·ªói thi·∫øu th∆∞ vi·ªán", "Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán openpyxl: pip install openpyxl")
    exit()
try:
    from playsound3 import playsound
except ImportError:
    messagebox.showerror("L·ªói thi·∫øu th∆∞ vi·ªán", "Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán playsound3: pip install playsound3")
    exit()

# --- C·∫•u h√¨nh ---
DEFAULT_INTERVAL_MINUTES = 15
EXCEL_FILE = "activity_log.xlsx"
SOUND_FILE = "clockbeep.wav"     # √Çm thanh nh·∫Øc nh·ªü ho·∫°t ƒë·ªông (c≈©)
ALERT_SOUND = "alert.wav"        # √Çm thanh c·∫£nh b√°o (m·ªõi cho nhi·ªám v·ª•)
TODO_FILE_PREFIX = "todolist_"   # Ti·ªÅn t·ªë file nhi·ªám v·ª•

# --- H√†m ti·ªán √≠ch t√¨m ƒë∆∞·ªùng d·∫´n (h·ªØu √≠ch khi ƒë√≥ng g√≥i b·∫±ng PyInstaller) ---
def resource_path(relative_path):
    """ L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn t√†i nguy√™n, ho·∫°t ƒë·ªông cho c·∫£ dev v√† PyInstaller """
    try:
        # PyInstaller t·∫°o th∆∞ m·ª•c t·∫°m _MEIPASS v√† l∆∞u tr·ªØ t√†i nguy√™n ·ªü ƒë√≥
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# --- L·ªõp ·ª©ng d·ª•ng ch√≠nh ---
class ReminderApp:
    def __init__(self, root_window):
        self.root = root_window
        self.root.title("Tr√¨nh Nh·∫Øc Nh·ªü Ho·∫°t ƒê·ªông & Nhi·ªám v·ª•") # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
        # self.root.geometry("300x180") # C√≥ th·ªÉ c·∫ßn tƒÉng k√≠ch th∆∞·ªõc m·ªôt ch√∫t
        self.root.resizable(False, False)

        # --- Bi·∫øn tr·∫°ng th√°i nh·∫Øc nh·ªü ho·∫°t ƒë·ªông (c≈©) ---
        self.reminder_interval_ms = DEFAULT_INTERVAL_MINUTES * 60 * 1000
        self.next_reminder_id = None
        self.sleep_until_time = 0
        self.countdown_id = None
        self.is_running = True

        # --- Bi·∫øn tr·∫°ng th√°i nhi·ªám v·ª• (m·ªõi) ---
        self.tasks = [] # Danh s√°ch l∆∞u nhi·ªám v·ª•: [{'name': 'Task Name', 'time': 'HH:MM', 'completed': False, 'alarm_id': None}]
        self.task_window = None # Theo d√µi c·ª≠a s·ªï xem nhi·ªám v·ª•
        self.task_creation_win = None # Theo d√µi c·ª≠a s·ªï t·∫°o nhi·ªám v·ª•
        self._temp_tasks_to_add = [] # Danh s√°ch t·∫°m nhi·ªám v·ª• khi ƒëang t·∫°o

        # --- √Çm thanh v√† Icon ---
        self.sound_path = resource_path(SOUND_FILE)
        self.alert_sound_path = resource_path(ALERT_SOUND) # ƒê∆∞·ªùng d·∫´n file √¢m thanh c·∫£nh b√°o
        # Th·ª≠ t·∫£i icon (b·ªè qua n·∫øu kh√¥ng c√≥ file icon.png)
        try:
            icon_path = resource_path("icon.png")
            if os.path.exists(icon_path):
                 self.root.iconphoto(True, PhotoImage(file=icon_path))
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ t·∫£i icon: {e}")

        # --- Giao di·ªán ---
        # Label hi·ªÉn th·ªã tr·∫°ng th√°i chung (ƒêang ch·∫°y/ƒêang ng·ªß)
        self.status_label = tk.Label(root_window, text="ƒêang ch·∫°y...", font=("Helvetica", 10), pady=5)
        self.status_label.pack(fill=tk.X, padx=10)

        # Label hi·ªÉn th·ªã th·ªùi gian ki·ªÉm tra ho·∫°t ƒë·ªông cu·ªëi
        self.last_check_label = tk.Label(root_window, text="Ch∆∞a c√≥ l·∫ßn ki·ªÉm tra ho·∫°t ƒë·ªông n√†o.", font=("Helvetica", 9), fg="gray", pady=5)
        self.last_check_label.pack(fill=tk.X, padx=10)

        button_frame = tk.Frame(root_window)
        button_frame.pack(pady=10)

        # N√∫t ƒêi ng·ªß (Sleep Button)
        self.sleep_button = tk.Button(button_frame,
                                       text="üò¥ ƒêi ng·ªß",
                                       command=self.go_to_sleep,
                                       width=10,
                                       bg="lightblue",
                                       fg="black",
                                       activebackground="dodgerblue",
                                       activeforeground="white",
                                       relief="flat")
        self.sleep_button.grid(row=0, column=0, padx=5)

        # N√∫t C√†i ƒë·∫∑t (Settings Button)
        self.settings_button = tk.Button(button_frame,
                                         text="‚öôÔ∏è C√†i ƒë·∫∑t",
                                         command=self.change_interval,
                                         width=10,
                                         bg="lightgray",
                                         fg="black",
                                         activebackground="gray",
                                         activeforeground="white",
                                         relief="flat")
        self.settings_button.grid(row=0, column=1, padx=5)

        # N√∫t D·ª´ng (Stop Button)
        self.stop_button = tk.Button(button_frame,
                                     text="‚èπÔ∏è D·ª´ng",
                                     command=self.stop_program,
                                     width=10,
                                     bg="red",
                                     fg="white",
                                     activebackground="darkred",
                                     activeforeground="white",
                                     relief="flat")
        self.stop_button.grid(row=0, column=2, padx=5)

        # --- Th√™m N√∫t Nhi·ªám v·ª• (m·ªõi) ---
        self.tasks_button = tk.Button(button_frame,
                                      text="üìù Nhi·ªám v·ª•",
                                      command=self.show_task_window, # M·ªü c·ª≠a s·ªï qu·∫£n l√Ω nhi·ªám v·ª•
                                      width=10,
                                      bg="orange",
                                      fg="black",
                                      activebackground="darkorange",
                                      activeforeground="white",
                                      relief="flat")
        self.tasks_button.grid(row=0, column=3, padx=5) # ƒê·∫∑t n√∫t n√†y v√†o c·ªôt th·ª© 3

        # ƒê·∫£m b·∫£o file Excel t·ªìn t·∫°i v·ªõi ti√™u ƒë·ªÅ
        self.ensure_excel_file()

        # --- Kh·ªüi t·∫°o v√† ki·ªÉm tra/t·∫£i nhi·ªám v·ª• khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông ---
        self.initialize_tasks()

        # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p nh·∫Øc nh·ªü ho·∫°t ƒë·ªông (ch·ªâ khi kh√¥ng ƒëang ng·ªß)
        # V√≤ng l·∫∑p n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi ·ªü cu·ªëi initialize_tasks()
        # self.schedule_next_reminder()


    # --- Ph∆∞∆°ng th·ª©c m·ªõi li√™n quan ƒë·∫øn Nhi·ªám v·ª• ---

    def initialize_tasks(self):
        """Ki·ªÉm tra file todolist c·ªßa h√¥m nay, t·∫£i nhi·ªám v·ª• n·∫øu c√≥."""
        print("ƒêang ki·ªÉm tra v√† t·∫£i nhi·ªám v·ª•...")
        tasks_exist = self.check_and_load_todolist() # Tr·∫£ v·ªÅ True n·∫øu file t·ªìn t·∫°i v√† ƒë·ªçc ƒë∆∞·ª£c

        if not tasks_exist or not self.tasks: # N·∫øu file kh√¥ng t·ªìn t·∫°i HO·∫∂C file r·ªóng sau khi t·∫£i
            print("Kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª• ho·∫∑c file tr·ªëng. Ph√°t c·∫£nh b√°o v√† y√™u c·∫ßu t·∫°o.")
            self.play_alert_sound()
            messagebox.showinfo("Th√¥ng b√°o Nhi·ªám v·ª•",
                                f"Kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª• cho h√¥m nay ({datetime.date.today().strftime('%d/%m/%Y')}). Vui l√≤ng t·∫°o nhi·ªám v·ª• m·ªõi.",
                                parent=self.root)
            # C√≥ th·ªÉ th√™m l·ª±a ch·ªçn t·ª± ƒë·ªông m·ªü c·ª≠a s·ªï t·∫°o nhi·ªám v·ª• ·ªü ƒë√¢y

        # --- L√™n l·ªãch b√°o th·ª©c cho c√°c nhi·ªám v·ª• ch∆∞a ho√†n th√†nh (s·∫Ω tri·ªÉn khai sau) ---
        # self.schedule_task_alarms() # H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi ·ªü b∆∞·ªõc sau

        # Sau khi x·ª≠ l√Ω nhi·ªám v·ª• ban ƒë·∫ßu, b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p nh·∫Øc nh·ªü ho·∫°t ƒë·ªông c≈©
        # Ch·ªâ b·∫Øt ƒë·∫ßu n·∫øu kh√¥ng ƒëang trong ch·∫ø ƒë·ªô ng·ªß t·ª´ l·∫ßn ch·∫°y tr∆∞·ªõc (tr·∫°ng th√°i ng·ªß kh√¥ng ƒë∆∞·ª£c l∆∞u)
        # Hi·ªán t·∫°i ch·ªâ c·∫ßn g·ªçi nh∆∞ c≈© l√† ƒë·ªß v√¨ schedule_next_reminder ƒë√£ ki·ªÉm tra sleep_until_time
        self.schedule_next_reminder()

    def ensure_excel_file(self):
        """Ki·ªÉm tra v√† t·∫°o file Excel n·∫øu ch∆∞a c√≥."""
        excel_path = resource_path(EXCEL_FILE)
        if not os.path.exists(excel_path):
            try:
                wb = Workbook()
                ws = wb.active
                ws.append(["Th·ªùi gian", "Ho·∫°t ƒë·ªông"])
                wb.save(excel_path)
                print(f"ƒê√£ t·∫°o file log: {excel_path}")
            except Exception as e:
                messagebox.showerror("L·ªói File Excel", f"Kh√¥ng th·ªÉ t·∫°o file {EXCEL_FILE}:\n{e}", parent=self.root)
                self.stop_program() # D·ª´ng n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c file log

    def get_today_todo_filepath(self):
        """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file nhi·ªám v·ª• c·ªßa ng√†y h√¥m nay (YYYYMMDD.json)."""
        today_str = datetime.date.today().strftime("%Y%m%d")
        # --- ƒê·ªïi ƒëu√¥i file nhi·ªám v·ª• sang .json ---
        filename = f"{TODO_FILE_PREFIX}{today_str}.json"
        # --------------------------------------
        return resource_path(filename)

    def check_and_load_todolist(self):
        """Ki·ªÉm tra file nhi·ªám v·ª• JSON c·ªßa h√¥m nay, t·∫£i n·ªôi dung n·∫øu c√≥.
           Tr·∫£ v·ªÅ True n·∫øu file t·ªìn t·∫°i v√† kh√¥ng c√≥ l·ªói ƒë·ªçc, False n·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói."""
        filepath = self.get_today_todo_filepath() # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n file .json
        self.tasks = [] # X√≥a danh s√°ch nhi·ªám v·ª• hi·ªán t·∫°i tr∆∞·ªõc khi t·∫£i

        if os.path.exists(filepath):
            print(f"T√¨m th·∫•y file nhi·ªám v·ª•: {filepath}")
            try:
                # --- ƒê·ªçc file JSON ---
                with open(filepath, 'r', encoding='utf-8') as f:
                    # Ki·ªÉm tra file kh√¥ng r·ªóng tr∆∞·ªõc khi load
                    content = f.read()
                    if content:
                         # Parse n·ªôi dung JSON th√†nh danh s√°ch c√°c dictionary Python
                         self.tasks = json.loads(content)
                    else:
                         self.tasks = [] # File r·ªóng, danh s√°ch nhi·ªám v·ª• tr·ªëng

                # --- X·ª≠ l√Ω t∆∞∆°ng th√≠ch ng∆∞·ª£c v√† th√™m c√°c kh√≥a m·∫∑c ƒë·ªãnh n·∫øu file c≈© thi·∫øu ---
                # ƒêi·ªÅu n√†y gi√∫p ·ª©ng d·ª•ng ho·∫°t ƒë·ªông v·ªõi file JSON c≈© h∆°n (n·∫øu c√≥)
                for task in self.tasks:
                    # alarm_id kh√¥ng ƒë∆∞·ª£c l∆∞u trong file, c·∫ßn kh·ªüi t·∫°o l·∫°i m·ªói l·∫ßn t·∫£i
                    task['alarm_id'] = None
                    # Th√™m c√°c kh√≥a m·ªõi n·∫øu file JSON c≈© kh√¥ng c√≥ ch√∫ng (ƒë·∫£m b·∫£o c·∫•u tr√∫c ƒë·ªìng nh·∫•t)
                    if 'completed' not in task:
                        task['completed'] = False # M·∫∑c ƒë·ªãnh l√† False n·∫øu kh√¥ng c√≥
                    if 'completion_time' not in task:
                         task['completion_time'] = None # M·∫∑c ƒë·ªãnh l√† None n·∫øu kh√¥ng c√≥
                    if 'labels' not in task:
                         task['labels'] = [] # M·∫∑c ƒë·ªãnh l√† danh s√°ch r·ªóng n·∫øu kh√¥ng c√≥
                    if 'scheduled_time' not in task:
                         # M·∫∑c ƒë·ªãnh scheduled_time l·∫•y t·ª´ 'time' n·∫øu kh√¥ng c√≥ kh√≥a scheduled_time
                         task['scheduled_time'] = task.get('time')
                    # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t kh√≥a 'name' v√† 'time' ƒë·ªÉ nhi·ªám v·ª• h·ª£p l·ªá
                    if 'name' not in task or 'time' not in task:
                         print(f"C·∫£nh b√°o: Nhi·ªám v·ª• c√≥ c·∫•u tr√∫c kh√¥ng ƒë·∫ßy ƒë·ªß b·ªã b·ªè qua khi t·∫£i: {task}")
                         # S·ª≠ d·ª•ng list slicing ho·∫∑c list comprehension ƒë·ªÉ x√≥a an to√†n khi l·∫∑p
                         continue # B·ªè qua nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá trong v√≤ng l·∫∑p for

                # Sau v√≤ng l·∫∑p, l·ªçc l·∫°i danh s√°ch self.tasks ƒë·ªÉ b·ªè c√°c nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá
                self.tasks = [task for task in self.tasks if 'name' in task and 'time' in task]


                print(f"ƒê√£ t·∫£i {len(self.tasks)} nhi·ªám v·ª• t·ª´ file JSON.")
                return True
            except json.JSONDecodeError as e:
                 print(f"L·ªói gi·∫£i m√£ JSON file nhi·ªám v·ª• {filepath}: {e}")
                 messagebox.showerror("L·ªói File Nhi·ªám v·ª•", f"Kh√¥ng th·ªÉ ƒë·ªçc file nhi·ªám v·ª• {filepath} (l·ªói JSON):\n{e}", parent=self.root)
                 # T√πy ch·ªçn: ƒê·ªïi t√™n file b·ªã l·ªói ƒë·ªÉ kh√¥ng ƒë·ªçc l·∫°i l·∫ßn sau v√† cho ng∆∞·ªùi d√πng ki·ªÉm tra
                 # os.rename(filepath, filepath + ".backup." + time.strftime("%Y%m%d%H%M%S"))
                 return False
            except Exception as e:
                print(f"L·ªói khi ƒë·ªçc file nhi·ªám v·ª• {filepath}:\n{e}")
                messagebox.showerror("L·ªói File Nhi·ªám v·ª•", f"Kh√¥ng th·ªÉ ƒë·ªçc file nhi·ªám v·ª• {filepath}:\n{e}", parent=self.root)
                return False
        else:
            print(f"Kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª•: {filepath}")
            return False # File kh√¥ng t·ªìn t·∫°i

    def save_todolist(self):
        """L∆∞u danh s√°ch nhi·ªám v·ª• hi·ªán t·∫°i (t·ª´ self.tasks) v√†o file JSON c·ªßa ng√†y h√¥m nay."""
        filepath = self.get_today_todo_filepath() # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n file .json

        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ l∆∞u: lo·∫°i b·ªè c√°c kh√≥a kh√¥ng c·∫ßn thi·∫øt (nh∆∞ alarm_id)
        tasks_to_save = []
        for task in self.tasks:
            task_copy = task.copy() # T·∫°o b·∫£n sao ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn dictionary g·ªëc
            # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa kh√≥a 'alarm_id' tr∆∞·ªõc khi c·ªë g·∫Øng x√≥a
            if 'alarm_id' in task_copy:
                del task_copy['alarm_id'] # ID b√°o th·ª©c ch·ªâ t·ªìn t·∫°i khi ·ª©ng d·ª•ng ch·∫°y, kh√¥ng l∆∞u v√†o file

            # Th√™m b·∫£n sao ƒë√£ lo·∫°i b·ªè 'alarm_id' v√†o danh s√°ch s·∫Ω ghi ra file
            tasks_to_save.append(task_copy)

        try:
            # --- Ghi file JSON ---
            # use ensure_ascii=False ƒë·ªÉ Python ghi k√Ω t·ª± ti·∫øng Vi·ªát m√† kh√¥ng m√£ h√≥a (v√≠ d·ª•: \u1ef9)
            # use indent=4 ƒë·ªÉ file JSON ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ƒë·∫πp, d·ªÖ ƒë·ªçc h∆°n khi m·ªü b·∫±ng tr√¨nh so·∫°n th·∫£o vƒÉn b·∫£n
            with open(filepath, 'w', encoding='utf-8') as f:
                 json.dump(tasks_to_save, f, ensure_ascii=False, indent=4)
            print(f"ƒê√£ l∆∞u {len(tasks_to_save)} nhi·ªám v·ª• v√†o file JSON: {filepath}")
        except Exception as e:
            print(f"L·ªói khi ghi file nhi·ªám v·ª• {filepath}: {e}")
            messagebox.showerror("L·ªói L∆∞u Nhi·ªám v·ª•", f"Kh√¥ng th·ªÉ ghi file nhi·ªám v·ª• {filepath}:\n{e}", parent=self.root)

    def play_alert_sound(self):
        """Ph√°t √¢m thanh c·∫£nh b√°o (khi kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª•)."""
        try:
            if os.path.exists(self.alert_sound_path):
                 # Ch·∫°y playsound trong thread ri√™ng ƒë·ªÉ tr√°nh treo GUI
                threading.Thread(target=playsound, args=(self.alert_sound_path,), daemon=True).start()
            else:
                print(f"Kh√¥ng t√¨m th·∫•y file √¢m thanh c·∫£nh b√°o: {self.alert_sound_path}")
                # T√πy ch·ªçn: hi·ªÉn th·ªã messagebox n·∫øu kh√¥ng t√¨m th·∫•y file √¢m thanh
                # messagebox.showwarning("L·ªói √Çm thanh", f"Kh√¥ng t√¨m th·∫•y file √¢m thanh c·∫£nh b√°o:\n{os.path.basename(ALERT_SOUND)}", parent=self.root)
        except Exception as e:
            print(f"L·ªói khi ph√°t √¢m thanh c·∫£nh b√°o '{self.alert_sound_path}': {e}")
            # Tr√°nh messagebox ·ªü ƒë√¢y ƒë·ªÉ kh√¥ng l√†m phi·ªÅn li√™n t·ª•c

    def show_task_window(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï qu·∫£n l√Ω/xem nhi·ªám v·ª• c·ªßa h√¥m nay."""
        # Tr√°nh m·ªü nhi·ªÅu c·ª≠a s·ªï c√πng lo·∫°i
        if self.task_window is None or not self.task_window.winfo_exists():
            self.task_window = tk.Toplevel(self.root)
            self.task_window.title(f"Nhi·ªám v·ª• h√¥m nay ({datetime.date.today().strftime('%d/%m/%Y')})")
            # self.task_window.geometry("400x300") # K√≠ch th∆∞·ªõc t√πy ch·ªçn
            self.task_window.transient(self.root) # L√†m c·ª≠a s·ªï con c·ªßa main window
            self.task_window.grab_set() # Ch·∫∑n t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï kh√°c ch√≠nh

            # --- N·ªôi dung c·ª≠a s·ªï Nhi·ªám v·ª• ---
            label = tk.Label(self.task_window, text="Danh s√°ch nhi·ªám v·ª• c·ªßa b·∫°n:")
            label.pack(pady=5)

            # N√∫t m·ªü c·ª≠a s·ªï t·∫°o nhi·ªám v·ª• m·ªõi
            add_button = tk.Button(self.task_window, text="‚ûï Th√™m Nhi·ªám v·ª• m·ªõi", command=self.show_task_creation_window)
            add_button.pack(pady=5)

            # Placeholder: Khu v·ª±c hi·ªÉn th·ªã danh s√°ch nhi·ªám v·ª•
            # Vi·ªác hi·ªÉn th·ªã t·ª´ng nhi·ªám v·ª• v·ªõi tr·∫°ng th√°i v√† n√∫t ho√†n th√†nh s·∫Ω c·∫ßn tri·ªÉn khai sau.
            # T·∫°m th·ªùi, ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ nhi·ªám v·ª•.
            if not self.tasks:
                 no_tasks_label = tk.Label(self.task_window, text="Ch∆∞a c√≥ nhi·ªám v·ª• n√†o ƒë∆∞·ª£c th√™m cho h√¥m nay.", fg="gray")
                 no_tasks_label.pack(pady=10)
            else:
                 # --- HI·ªÇN TH·ªä DANH S√ÅCH NHI·ªÜM V·ª§ (C·∫¶N TRI·ªÇN KHAI TH√äM) ---
                 # V√≤ng l·∫∑p d∆∞·ªõi ƒë√¢y ch·ªâ l√† v√≠ d·ª• ƒë∆°n gi·∫£n hi·ªÉn th·ªã t√™n v√† th·ªùi gian
                 # B·∫°n s·∫Ω c·∫ßn t·∫°o c√°c widget (Label, Checkbutton/Button) cho t·ª´ng nhi·ªám v·ª•
                 # v√† th√™m c∆° ch·∫ø ƒë√°nh d·∫•u ho√†n th√†nh.
                 for task in self.tasks:
                     task_text = f"{task['time']} - {task['name']}"
                     # C·∫ßn hi·ªÉn th·ªã tr·∫°ng th√°i completed[''] sau
                     task_label = tk.Label(self.task_window, text=task_text)
                     task_label.pack(anchor='w', padx=10) # CƒÉn tr√°i


                 # --- K·∫æT TH√öC HI·ªÇN TH·ªä DANH S√ÅCH NHI·ªÜM V·ª§ ---


            # N√∫t ƒë√≥ng c·ª≠a s·ªï nhi·ªám v·ª•
            close_button = tk.Button(self.task_window, text="ƒê√≥ng", command=self.task_window.destroy)
            close_button.pack(pady=10)

            # X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï b·∫±ng n√∫t 'X'
            self.task_window.protocol("WM_DELETE_WINDOW", self.task_window.destroy)


        self.task_window.lift() # ƒê∆∞a c·ª≠a s·ªï l√™n tr√™n c√πng


    def show_task_creation_window(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p nhi·ªám v·ª• m·ªõi."""
        # Tr√°nh m·ªü nhi·ªÅu c·ª≠a s·ªï t·∫°o nhi·ªám v·ª•
        if self.task_creation_win is None or not self.task_creation_win.winfo_exists():
            self.task_creation_win = tk.Toplevel(self.root)
            self.task_creation_win.title("T·∫°o Nhi·ªám v·ª• m·ªõi")
            self.task_creation_win.geometry("350x220") # C√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc
            self.task_creation_win.transient(self.root) # L√†m c·ª≠a s·ªï con
            self.task_creation_win.grab_set() # Ch·∫∑n t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï kh√°c

            # Danh s√°ch t·∫°m th·ªùi ƒë·ªÉ gi·ªØ c√°c nhi·ªám v·ª• ƒë∆∞·ª£c th√™m trong phi√™n l√†m vi·ªác c·ªßa c·ª≠a s·ªï n√†y
            # Ch·ªâ th√™m v√†o self.tasks v√† l∆∞u file khi nh·∫•n n√∫t "L∆∞u v√† ƒê√≥ng"
            self._temp_tasks_to_add = []

            tk.Label(self.task_creation_win, text="T√™n Nhi·ªám v·ª•:").pack(pady=(10,0))
            task_name_entry = tk.Entry(self.task_creation_win, width=40)
            task_name_entry.pack(pady=(0,5))
            task_name_entry.focus_set() # Focus v√†o √¥ nh·∫≠p t√™n

            tk.Label(self.task_creation_win, text="Th·ªùi gian (HH:MM - 24h):").pack(pady=(10,0))
            task_time_entry = tk.Entry(self.task_creation_win, width=10)
            task_time_entry.pack(pady=(0,5))

            # Frame cho c√°c n√∫t h√†nh ƒë·ªông
            button_frame = tk.Frame(self.task_creation_win)
            button_frame.pack(pady=10)

            # N√∫t "Th√™m v√†o danh s√°ch t·∫°m th·ªùi"
            add_button = tk.Button(button_frame, text="‚ûï Th√™m v√†o danh s√°ch t·∫°m",
                                   command=lambda: self.add_task_from_entries(task_name_entry, task_time_entry))
            add_button.grid(row=0, column=0, padx=5)

            # N√∫t "L∆∞u v√† ƒê√≥ng" (L∆∞u c√°c nhi·ªám v·ª• t·∫°m v√†o danh s√°ch ch√≠nh v√† file)
            save_button = tk.Button(button_frame, text="üíæ L∆∞u t·∫•t c·∫£ v√† ƒê√≥ng",
                                    command=self.save_and_close_task_creation)
            save_button.grid(row=0, column=1, padx=5)

            # N√∫t "H·ªßy" (ƒê√≥ng c·ª≠a s·ªï m√† kh√¥ng l∆∞u c√°c nhi·ªám v·ª• t·∫°m)
            cancel_button = tk.Button(button_frame, text="‚ùå H·ªßy",
                                      command=self.task_creation_win.destroy)
            cancel_button.grid(row=0, column=2, padx=5)

            # C√≥ th·ªÉ th√™m m·ªôt khu v·ª±c hi·ªÉn th·ªã c√°c nhi·ªám v·ª• ƒë√£ th√™m t·∫°m ·ªü ƒë√¢y n·∫øu mu·ªën

            # X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï b·∫±ng n√∫t 'X' (t∆∞∆°ng t·ª± nh∆∞ nh·∫•n H·ªßy)
            self.task_creation_win.protocol("WM_DELETE_WINDOW", self.task_creation_win.destroy)


        self.task_creation_win.lift() # ƒê∆∞a c·ª≠a s·ªï t·∫°o nhi·ªám v·ª• l√™n tr√™n c√πng


    def add_task_from_entries(self, task_name_entry, task_time_entry):
        """L·∫•y d·ªØ li·ªáu t·ª´ Entry trong c·ª≠a s·ªï t·∫°o nhi·ªám v·ª•, validate v√† th√™m v√†o danh s√°ch t·∫°m th·ªùi."""
        name = task_name_entry.get().strip()
        time_str = task_time_entry.get().strip()

        if not name:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n nhi·ªám v·ª•.", parent=self.task_creation_win)
            return
        if not time_str:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p th·ªùi gian nhi·ªám v·ª• (HH:MM).", parent=self.task_creation_win)
            return

        # X√°c th·ª±c ƒë·ªãnh d·∫°ng th·ªùi gian c∆° b·∫£n (HH:MM)
        try:
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng HH:MM v√† gi√° tr·ªã h·ª£p l·ªá
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours <= 23 and 0 <= minutes <= 59):
                 raise ValueError("Gi·ªù ho·∫∑c ph√∫t kh√¥ng h·ª£p l·ªá")
            # Ch·ªâ c·∫ßn ki·ªÉm tra ƒë·ªãnh d·∫°ng, kh√¥ng c·∫ßn ƒë·ªëi t∆∞·ª£ng time_obj ·ªü ƒë√¢y
            datetime.datetime.strptime(time_str, "%H:%M")
        except ValueError:
            messagebox.showwarning("Sai ƒë·ªãnh d·∫°ng", "Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 09:00, 14:30).", parent=self.task_creation_win)
            return

        # Th√™m nhi·ªám v·ª• v√†o danh s√°ch t·∫°m th·ªùi
        self._temp_tasks_to_add.append({'name': name, 'time': time_str, 'completed': False, 'alarm_id': None})
        print(f"ƒê√£ th√™m t·∫°m nhi·ªám v·ª•: {name} l√∫c {time_str}")

        # Th√¥ng b√°o ƒë√£ th√™m v√† l√†m s·∫°ch c√°c √¥ nh·∫≠p li·ªáu
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m t·∫°m nhi·ªám v·ª• '{name}'. Ti·∫øp t·ª•c nh·∫≠p nhi·ªám v·ª• kh√°c ho·∫∑c nh·∫•n 'L∆∞u'.", parent=self.task_creation_win)
        task_name_entry.delete(0, tk.END)
        task_time_entry.delete(0, tk.END) # X√≥a c·∫£ th·ªùi gian ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p m·ªõi cho nhi·ªám v·ª• ti·∫øp theo
        task_name_entry.focus_set() # Tr·∫£ focus v·ªÅ √¥ t√™n nhi·ªám v·ª•

        # T√πy ch·ªçn: C·∫≠p nh·∫≠t khu v·ª±c xem tr∆∞·ªõc nhi·ªám v·ª• t·∫°m trong c·ª≠a s·ªï t·∫°o

    def save_and_close_task_creation(self):
        """L∆∞u t·∫•t c·∫£ c√°c nhi·ªám v·ª• t·ª´ danh s√°ch t·∫°m th·ªùi v√†o danh s√°ch ch√≠nh v√† file, sau ƒë√≥ ƒë√≥ng c·ª≠a s·ªï t·∫°o."""
        if not self._temp_tasks_to_add:
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a c√≥ nhi·ªám v·ª• m·ªõi n√†o ƒë∆∞·ª£c th√™m ƒë·ªÉ l∆∞u.", parent=self.task_creation_win)
            self.task_creation_win.destroy()
            return

        # Th√™m c√°c nhi·ªám v·ª• t·ª´ danh s√°ch t·∫°m v√†o danh s√°ch ch√≠nh
        # L∆∞u √Ω: Hi·ªán t·∫°i c√°c nhi·ªám v·ª• c≈© trong self.tasks s·∫Ω b·ªã gi·ªØ l·∫°i.
        # N·∫øu b·∫°n mu·ªën ch·ªâ l∆∞u nhi·ªám v·ª• M·ªöI t·ª´ c·ª≠a s·ªï n√†y, b·∫°n c√≥ th·ªÉ clear self.tasks tr∆∞·ªõc
        # ho·∫∑c h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ghi ƒë√®/th√™m v√†o.
        # C√°ch hi·ªán t·∫°i l√† TH√äM V√ÄO danh s√°ch nhi·ªám v·ª• hi·ªán c√≥.
        self.tasks.extend(self._temp_tasks_to_add)
        self._temp_tasks_to_add = [] # X√≥a danh s√°ch t·∫°m sau khi ƒë√£ th√™m v√†o ch√≠nh

        # L∆∞u danh s√°ch nhi·ªám v·ª• ch√≠nh (bao g·ªìm c·∫£ c≈© v√† m·ªõi ƒë∆∞·ª£c th√™m t·∫°m) v√†o file
        self.save_todolist()

        # --- C·∫ßn tri·ªÉn khai sau: L√™n l·ªãch l·∫°i b√°o th·ª©c cho T·∫§T C·∫¢ nhi·ªám v·ª• ch∆∞a ho√†n th√†nh ---
        # (bao g·ªìm c·∫£ nhi·ªám v·ª• c≈© v√† m·ªõi)
        # self.cancel_all_task_alarms() # H·ªßy h·∫øt b√°o th·ª©c c≈© (n·∫øu c√≥)
        # self.schedule_task_alarms() # L√™n l·ªãch l·∫°i

        # --- C·∫ßn tri·ªÉn khai sau: C·∫≠p nh·∫≠t hi·ªÉn th·ªã trong c·ª≠a s·ªï xem nhi·ªám v·ª• n·∫øu n√≥ ƒëang m·ªü ---
        # self.update_task_display()
        if self.task_window and self.task_window.winfo_exists():
             # T√πy ch·ªçn: ƒë√≥ng c·ª≠a s·ªï xem nhi·ªám v·ª• c≈© v√† m·ªü l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t d·ªÖ h∆°n
             # Ho·∫∑c vi·∫øt h√†m update_task_display ƒë·ªÉ l√†m m·ªõi n·ªôi dung
             self.task_window.destroy()
             self.show_task_window()


        messagebox.showinfo("L∆∞u th√†nh c√¥ng", f"ƒê√£ l∆∞u t·ªïng c·ªông {len(self.tasks)} nhi·ªám v·ª• v√†o file.", parent=self.task_creation_win)
        self.task_creation_win.destroy() # ƒê√≥ng c·ª≠a s·ªï t·∫°o nhi·ªám v·ª•


    # --- Ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn nh·∫Øc nh·ªü ho·∫°t ƒë·ªông (c≈©) ---

    # C√°c ph∆∞∆°ng th·ª©c save_log, play_notification_sound, schedule_next_reminder,
    # ask_question, go_to_sleep, update_countdown, change_interval, stop_program
    # gi·ªØ nguy√™n ho·∫∑c ch·ªâ s·ª≠a ƒë·ªïi nh·ªè (nh∆∞ c·∫≠p nh·∫≠t last_check_label trong save_log)

    def save_log(self, answer):
        """L∆∞u c√¢u tr·∫£ l·ªùi v√†o file Excel v√† c·∫≠p nh·∫≠t Label th·ªùi gian."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        excel_path = resource_path(EXCEL_FILE)
        try:
            wb = load_workbook(excel_path)
            ws = wb.active
            ws.append([timestamp, answer])
            wb.save(excel_path)
            # --- C·∫≠p nh·∫≠t Label th·ªùi gian ki·ªÉm tra cu·ªëi ---
            self.last_check_label.config(text=f"L·∫ßn cu·ªëi ki·ªÉm tra ho·∫°t ƒë·ªông l√∫c: {timestamp}", fg="black") # ƒê·ªïi l·∫°i m√†u ch·ªØ cho r√µ h∆°n
            # ---------------------------------------------
        except Exception as e:
             messagebox.showwarning("L·ªói L∆∞u Log", f"Kh√¥ng th·ªÉ ghi v√†o file {EXCEL_FILE}:\n{e}\n\nLog s·∫Ω ch·ªâ ƒë∆∞·ª£c l∆∞u t·∫°m v√†o b·ªô nh·ªõ.", parent=self.root)
             # C√≥ th·ªÉ th√™m c∆° ch·∫ø l∆∞u t·∫°m v√†o bi·∫øn ho·∫∑c file text d·ª± ph√≤ng ·ªü ƒë√¢y

    def play_notification_sound(self):
        """Ph√°t √¢m thanh th√¥ng b√°o nh·∫Øc nh·ªü ho·∫°t ƒë·ªông."""
        try:
            # Ch·∫°y playsound trong thread ri√™ng ƒë·ªÉ tr√°nh treo GUI n·∫øu file l·ªõn/l·ªói
            threading.Thread(target=playsound, args=(self.sound_path,), daemon=True).start()
        except Exception as e:
            print(f"L·ªói khi ph√°t √¢m thanh nh·∫Øc nh·ªü '{self.sound_path}': {e}")
            # Kh√¥ng c·∫ßn messagebox ·ªü ƒë√¢y ƒë·ªÉ tr√°nh l√†m phi·ªÅn li√™n t·ª•c


    def schedule_next_reminder(self):
        """L√™n l·ªãch cho l·∫ßn nh·∫Øc nh·ªü ho·∫°t ƒë·ªông ti·∫øp theo."""
        # H·ªßy l·ªãch tr√¨nh c≈© n·∫øu c√≥
        if self.next_reminder_id:
            self.root.after_cancel(self.next_reminder_id)
            self.next_reminder_id = None # ƒê·∫∑t l·∫°i v·ªÅ None sau khi h·ªßy

        if self.is_running and time.time() >= self.sleep_until_time:
            print(f"L√™n l·ªãch nh·∫Øc nh·ªü ho·∫°t ƒë·ªông sau {self.reminder_interval_ms // 1000} gi√¢y.")
            # T√≠nh to√°n th·ªùi gian ch·ªù d·ª±a tr√™n interval
            delay_ms = self.reminder_interval_ms
            self.next_reminder_id = self.root.after(delay_ms, self.ask_question)
            # C·∫≠p nh·∫≠t status_label n·∫øu kh√¥ng ƒëang trong ch·∫ø ƒë·ªô ng·ªß
            if self.countdown_id is None:
                 self.status_label.config(text=f"ƒêang ch·∫°y... Nh·∫Øc nh·ªü sau {delay_ms // 60000} ph√∫t")
        elif self.is_running and time.time() < self.sleep_until_time:
            # N·∫øu ƒëang ng·ªß, l√™n l·ªãch ƒë·ªÉ ki·ªÉm tra l·∫°i khi h·∫øt gi·ªù ng·ªß
             wake_up_delay = int((self.sleep_until_time - time.time()) * 1000)
             # ƒê·∫£m b·∫£o delay kh√¥ng √¢m
             if wake_up_delay < 0:
                 wake_up_delay = 0
             print(f"ƒêang ng·ªß, ki·ªÉm tra l·∫°i sau {wake_up_delay / 1000:.0f} gi√¢y.")
             # L√™n l·ªãch ki·ªÉm tra l·∫°i. update_countdown s·∫Ω c·∫≠p nh·∫≠t status_label.
             # Th√™m 0.5s ƒë·ªÉ ch·∫Øc ch·∫Øn ƒë√£ qua th·ªùi ƒëi·ªÉm sleep_until_time m·ªôt ch√∫t
             self.next_reminder_id = self.root.after(wake_up_delay + 500, self.schedule_next_reminder)
             # status_label ƒë√£ ƒë∆∞·ª£c update_countdown x·ª≠ l√Ω khi ƒëang ng·ªß

        # N·∫øu self.is_running l√† False, s·∫Ω kh√¥ng l√™n l·ªãch nh·∫Øc nh·ªü m·ªõi

    def ask_question(self):
        """H·ªèi ng∆∞·ªùi d√πng v·ªÅ ho·∫°t ƒë·ªông, y√™u c·∫ßu nh·∫≠p, v√† l√™n l·ªãch l·∫°i."""
        # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i tr∆∞·ªõc khi hi·ªÉn th·ªã c·ª≠a s·ªï
        # ƒê·∫£m b·∫£o c·ª≠a s·ªï kh√¥ng hi·ªán l√™n n·∫øu ·ª©ng d·ª•ng ƒë√£ d·ª´ng ho·∫∑c ƒëang ng·ªß
        if not self.is_running or time.time() < self.sleep_until_time:
            print("B·ªè qua c·ª≠a s·ªï h·ªèi do ƒëang d·ª´ng ho·∫∑c ng·ªß.")
            # N·∫øu ƒëang ch·∫°y nh∆∞ng v·∫´n ƒëang ng·ªß (b·ªã g·ªçi s·ªõm), l√™n l·ªãch ki·ªÉm tra l·∫°i khi h·∫øt ng·ªß
            if self.is_running and time.time() < self.sleep_until_time:
                 self.schedule_next_reminder()
            return # Tho√°t kh·ªèi h√†m n·∫øu kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã

        self.play_notification_sound()

        # T·∫°o c·ª≠a s·ªï ri√™ng (Toplevel) ƒë·ªÉ h·ªèi
        ask_win = tk.Toplevel(self.root)
        ask_win.title("B·∫°n ƒëang l√†m g√¨?")
        # ask_win.geometry("350x150") # B·ªè d√≤ng n√†y ƒë·ªÉ d√πng to√†n m√†n h√¨nh
        ask_win.resizable(False, False) # Gi·ªØ nguy√™n kh√¥ng cho thay ƒë·ªïi k√≠ch th∆∞·ªõc th·ªß c√¥ng

        # --- Y√™u c·∫ßu: Chi·∫øm tr·ªçn m√†n h√¨nh ---
        try:
            ask_win.attributes("-fullscreen", True)
            # ask_win.attributes("-topmost", True) # C√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt trong fullscreen
        except tk.TclError:
            # N·∫øu h·ªá ƒëi·ªÅu h√†nh kh√¥ng h·ªó tr·ª£ fullscreen theo c√°ch n√†y
            print("C·∫£nh b√°o: Ch·∫ø ƒë·ªô to√†n m√†n h√¨nh Tkinter c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß. Th·ª≠ ph√≥ng to t·ªëi ƒëa.")
            ask_win.state('zoomed') # Th·ª≠ ph√≥ng to c·ª≠a s·ªï (c√≥ th·ªÉ v·∫´n hi·ªÉn th·ªã thanh taskbar)
            ask_win.attributes("-topmost", True) # ƒê·∫£m b·∫£o ·ªü tr√™n c√πng n·∫øu kh√¥ng full m√†n h√¨nh

        # ƒê·∫£m b·∫£o c·ª≠a s·ªï lu√¥n ·ªü tr√™n c√πng v√† chi·∫øm quy·ªÅn t∆∞∆°ng t√°c
        ask_win.attributes("-topmost", True) # ƒê·∫£m b·∫£o lu√¥n tr√™n c√πng
        ask_win.grab_set() # Ch·∫∑n t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï kh√°c cho ƒë·∫øn khi c·ª≠a s·ªï n√†y b·ªã ƒë√≥ng

        # T·∫°o m·ªôt Frame ƒë·ªÉ ch·ª©a n·ªôi dung, gi√∫p cƒÉn gi·ªØa n·ªôi dung trong c·ª≠a s·ªï fullscreen/maximized
        content_frame = tk.Frame(ask_win)
        # S·ª≠ d·ª•ng place ƒë·ªÉ cƒÉn gi·ªØa Frame trong c·ª≠a s·ªï
        content_frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

        # Label c√¢u h·ªèi
        label = tk.Label(content_frame, text=f"B·∫°n ƒë√£ l√†m g√¨ trong {self.reminder_interval_ms // (60 * 1000)} ph√∫t v·ª´a qua?", font=("Helvetica", 16, "bold")) # TƒÉng k√≠ch th∆∞·ªõc font v√† in ƒë·∫≠m cho d·ªÖ ƒë·ªçc trong fullscreen
        label.pack(pady=20)

        # √î nh·∫≠p li·ªáu
        entry = tk.Entry(content_frame, width=60, font=("Helvetica", 14)) # TƒÉng width v√† font
        entry.pack(pady=10)
        entry.focus_set() # ƒê·∫∑t focus v√†o √¥ nh·∫≠p li·ªáu ngay l·∫≠p t·ª©c

        # H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t OK ho·∫∑c Enter
        def submit_answer():
            answer = entry.get().strip() # L·∫•y n·ªôi dung v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu/cu·ªëi

            # --- Y√™u c·∫ßu: Kh√¥ng th·ªÉ ƒë√≥ng n·∫øu tr·ªëng ---
            if not answer: # Ki·ªÉm tra xem √¥ nh·∫≠p li·ªáu c√≥ tr·ªëng kh√¥ng
                messagebox.showwarning("Th√¥ng tin c·∫ßn thi·∫øt", "Vui l√≤ng nh·∫≠p ho·∫°t ƒë·ªông c·ªßa b·∫°n tr∆∞·ªõc khi x√°c nh·∫≠n.", parent=ask_win)
                entry.focus_set() # Tr·∫£ focus v·ªÅ √¥ nh·∫≠p li·ªáu ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p
                return # D·ª´ng h√†m t·∫°i ƒë√¢y, kh√¥ng ƒë√≥ng c·ª≠a s·ªï

            # --- N·∫øu c√≥ n·ªôi dung, ti·∫øn h√†nh l∆∞u v√† ƒë√≥ng c·ª≠a s·ªï ---
            self.save_log(answer) # L∆∞u c√¢u tr·∫£ l·ªùi v√†o log Excel
            ask_win.destroy()      # ƒê√≥ng c·ª≠a s·ªï h·ªèi
            self.schedule_next_reminder() # L√™n l·ªãch cho l·∫ßn h·ªèi ti·∫øp theo

        # N√∫t OK
        submit_button = tk.Button(content_frame, text="X√°c nh·∫≠n", command=submit_answer, width=15, font=("Helvetica", 14)) # TƒÉng width v√† font
        submit_button.pack(pady=20)

        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n ph√≠m Enter trong √¥ nh·∫≠p li·ªáu
        entry.bind("<Return>", lambda event: submit_answer())

        # --- Y√™u c·∫ßu: Kh√¥ng th·ªÉ ƒë√≥ng b·∫±ng n√∫t 'X' ---
        # Ghi ƒë√® h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa n√∫t ƒë√≥ng c·ª≠a s·ªï (n√∫t 'X' ·ªü g√≥c)
        # H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi nh·∫•n n√∫t 'X'
        def prevent_closing():
             # C√≥ th·ªÉ hi·ªÉn th·ªã m·ªôt th√¥ng b√°o ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† kh√¥ng l√†m g√¨ c·∫£
             messagebox.showwarning("Kh√¥ng th·ªÉ ƒë√≥ng", "B·∫°n c·∫ßn nh·∫≠p ho·∫°t ƒë·ªông c·ªßa m√¨nh v√† nh·∫•n 'X√°c nh·∫≠n' ho·∫∑c Enter.", parent=ask_win)
             entry.focus_set() # Tr·∫£ focus v·ªÅ √¥ nh·∫≠p li·ªáu

        # ƒêƒÉng k√Ω h√†m prevent_closing cho s·ª± ki·ªán WM_DELETE_WINDOW (nh·∫•n n√∫t X)
        ask_win.protocol("WM_DELETE_WINDOW", prevent_closing)

        # Kh√¥ng l√™n l·ªãch nh·∫Øc nh·ªü m·ªõi ngay l·∫≠p t·ª©c ·ªü ƒë√¢y,
        # m√† ƒë·ª£i sau khi ng∆∞·ªùi d√πng tr·∫£ l·ªùi ho·∫∑c ƒë√≥ng c·ª≠a s·ªï h·ªèi.

    def go_to_sleep(self):
        """T·∫°m d·ª´ng nh·∫Øc nh·ªü ho·∫°t ƒë·ªông trong m·ªôt kho·∫£ng th·ªùi gian."""
        if self.countdown_id: # N·∫øu ƒëang ƒë·∫øm ng∆∞·ª£c (ƒë√£ ng·ªß r·ªìi)
             messagebox.showinfo("Th√¥ng b√°o", "ƒêang trong ch·∫ø ƒë·ªô ng·ªß r·ªìi.", parent=self.root)
             return

        minutes = simpledialog.askinteger("ƒêi ng·ªß", "B·∫°n mu·ªën ngh·ªâ trong bao nhi√™u ph√∫t?",
                                          minvalue=1, maxvalue=1440, parent=self.root) # T·ªëi ƒëa 1 ng√†y
        if minutes:
            # H·ªßy l·ªãch tr√¨nh nh·∫Øc nh·ªü ho·∫°t ƒë·ªông ti·∫øp theo (n·∫øu c√≥)
            if self.next_reminder_id:
                self.root.after_cancel(self.next_reminder_id)
                self.next_reminder_id = None
                print("ƒê√£ h·ªßy l·ªãch nh·∫Øc nh·ªü ho·∫°t ƒë·ªông do ƒëi ng·ªß.")

            self.sleep_until_time = time.time() + minutes * 60
            messagebox.showinfo("Th√¥ng b√°o", f"S·∫Ω kh√¥ng nh·∫Øc nh·ªü ho·∫°t ƒë·ªông trong {minutes} ph√∫t t·ªõi.", parent=self.root)
            self.update_countdown() # B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c tr√™n status_label
            # schedule_next_reminder s·∫Ω ƒë∆∞·ª£c g·ªçi khi update_countdown ho√†n th√†nh
            # self.schedule_next_reminder() # Kh√¥ng c·∫ßn g·ªçi ·ªü ƒë√¢y n·ªØa

    def update_countdown(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c th·ªùi gian ng·ªß tr√™n status_label."""
        # H·ªßy l·ªãch c·∫≠p nh·∫≠t c≈© n·∫øu c√≥
        if self.countdown_id:
            self.root.after_cancel(self.countdown_id)
            self.countdown_id = None # ƒê·∫∑t l·∫°i v·ªÅ None sau khi h·ªßy

        # Ki·ªÉm tra xem c√≤n th·ªùi gian ng·ªß kh√¥ng
        remaining = int(self.sleep_until_time - time.time())

        if remaining > 0:
            mins, secs = divmod(remaining, 60)
            self.status_label.config(text=f"üò¥ ƒêang ng·ªß: c√≤n {mins:02d}:{secs:02d}")
            # L√™n l·ªãch c·∫≠p nh·∫≠t l·∫°i sau 1 gi√¢y
            self.countdown_id = self.root.after(1000, self.update_countdown)
        else:
            # H·∫øt gi·ªù ng·ªß
            self.status_label.config(text="ƒê√£ th·ª©c d·∫≠y!")
            self.sleep_until_time = 0 # ƒê·∫∑t l·∫°i th·ªùi gian ng·ªß v·ªÅ 0
            self.countdown_id = None
            print("H·∫øt gi·ªù ng·ªß.")
            # Sau khi th·ª©c d·∫≠y, l√™n l·ªãch nh·∫Øc nh·ªü ho·∫°t ƒë·ªông ti·∫øp theo
            self.schedule_next_reminder()


    def change_interval(self):
        """Thay ƒë·ªïi kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn nh·∫Øc nh·ªü ho·∫°t ƒë·ªông."""
        current_interval_min = self.reminder_interval_ms // (60 * 1000)
        new_minutes = simpledialog.askinteger("C√†i ƒë·∫∑t th·ªùi gian",
                                              f"Nh·∫≠p kho·∫£ng th·ªùi gian nh·∫Øc nh·ªü ho·∫°t ƒë·ªông (ph√∫t):\n(Hi·ªán t·∫°i: {current_interval_min} ph√∫t)",
                                              minvalue=1, maxvalue=120, parent=self.root, # Gi·ªõi h·∫°n 2 ti·∫øng
                                              initialvalue=current_interval_min)
        if new_minutes is not None and new_minutes != current_interval_min: # Ki·ªÉm tra new_minutes is not None v√¨ simpledialog tr·∫£ v·ªÅ None n·∫øu nh·∫•n Cancel
            self.reminder_interval_ms = new_minutes * 60 * 1000
            messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ c·∫≠p nh·∫≠t kho·∫£ng th·ªùi gian nh·∫Øc nh·ªü ho·∫°t ƒë·ªông th√†nh {new_minutes} ph√∫t.", parent=self.root)
            print(f"ƒê√£ ƒë·ªïi kho·∫£ng th·ªùi gian nh·∫Øc nh·ªü ho·∫°t ƒë·ªông th√†nh {new_minutes} ph√∫t.")
            # L√™n l·ªãch l·∫°i ngay v·ªõi kho·∫£ng th·ªùi gian m·ªõi (n·∫øu kh√¥ng ƒëang ng·ªß)
            if time.time() >= self.sleep_until_time:
                 self.schedule_next_reminder()

    def stop_program(self):
        """D·ª´ng ·ª©ng d·ª•ng ho√†n to√†n."""
        print("Y√™u c·∫ßu d·ª´ng ·ª©ng d·ª•ng.")
        self.is_running = False # ƒê·∫∑t c·ªù d·ª´ng

        # H·ªßy t·∫•t c·∫£ c√°c l·ªãch tr√¨nh .after() ƒëang ch·ªù
        if self.next_reminder_id:
            self.root.after_cancel(self.next_reminder_id)
            self.next_reminder_id = None
            print("ƒê√£ h·ªßy l·ªãch nh·∫Øc nh·ªü ho·∫°t ƒë·ªông cu·ªëi c√πng.")
        if self.countdown_id:
            self.root.after_cancel(self.countdown_id)
            self.countdown_id = None
            print("ƒê√£ h·ªßy l·ªãch ƒë·∫øm ng∆∞·ª£c.")

        # --- C·∫ßn tri·ªÉn khai sau: H·ªßy t·∫•t c·∫£ b√°o th·ª©c nhi·ªám v·ª• ---
        # self.cancel_all_task_alarms()
        # ----------------------------------------------------

        print("D·ª´ng ·ª©ng d·ª•ng.")
        self.root.destroy() # ƒê√≥ng c·ª≠a s·ªï ch√≠nh v√† k·∫øt th√∫c mainloop


# --- Kh·ªüi ch·∫°y ·ª©ng d·ª•ng ---
if __name__ == "__main__":
    root = tk.Tk()
    app = ReminderApp(root)
    # ƒê·∫∑t x·ª≠ l√Ω khi nh·∫•n n√∫t ƒë√≥ng c·ª≠a s·ªï (n√∫t X) c·ªßa c·ª≠a s·ªï ch√≠nh
    root.protocol("WM_DELETE_WINDOW", app.stop_program)
    root.mainloop()

# file with big update about tasks todolist and alarm system
# 2025-04-24