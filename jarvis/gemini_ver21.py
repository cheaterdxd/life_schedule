import tkinter as tk
from tkinter import simpledialog, messagebox, PhotoImage
import time, threading
import os
import sys
import datetime
import json

# try:
#     from openpyxl import Workbook, load_workbook
# except ImportError:
#     messagebox.showerror("L·ªói thi·∫øu th∆∞ vi·ªán", "Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán openpyxl: pip install openpyxl")
#     exit()
try:
    from playsound3 import playsound
except ImportError:
    messagebox.showerror("L·ªói thi·∫øu th∆∞ vi·ªán", "Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán playsound3: pip install playsound3")
    exit()

# --- C·∫•u h√¨nh ---
DEFAULT_INTERVAL_MINUTES = 15
ACTIVITY_LOG_FILE  = "activity_log.json"
SOUND_FILE = "clockbeep.wav"
ALERT_SOUND = "alert.wav"
TODO_FILE_PREFIX = "todolist_"

# --- Danh s√°ch C·∫£m x√∫c v√† Ph√¢n lo·∫°i H√†nh vi ---
EMOTION_LABELS = ["Vui", "R·∫•t vui", "H·∫°nh ph√∫c", "H·∫°nh ph√∫c Vi√™n m√£n", "B√¨nh th∆∞·ªùng", "Gi·∫≠n d·ªØ", "S·∫ßu mu·ªôn", "R·ªëi tr√≠", "H·ªï th·∫πn"]
POSITIVE_EMOTIONS = ["Vui", "R·∫•t vui", "H·∫°nh ph√∫c", "H·∫°nh ph√∫c Vi√™n m√£n"]
NEGATIVE_EMOTIONS = ["Gi·∫≠n d·ªØ", "S·∫ßu mu·ªôn", "R·ªëi tr√≠", "H·ªï th·∫πn"]
# C·∫£m x√∫c "B√¨nh th∆∞·ªùng" l√† trung t√≠nh

BEHAVIOR_CATEGORIES = [
    "Nghi√™n c·ª©u c√≥ √≠ch",
    "ƒê·ªçc c√≥ √≠ch",
    "Vi·∫øt c√≥ √≠ch",
    "N√≥i/ Thuy·∫øt gi·∫£ng c√≥ √≠ch",
    "Nghi√™n c·ª©u kh√¥ng c√≥ √≠ch",
    "ƒê·ªçc kh√¥ng c√≥ √≠ch",
    "Vi·∫øt kh√¥ng c√≥ √≠ch",
    "N√≥i/ Thuy·∫øt gi·∫£ng kh√¥ng c√≥ √≠ch",
    "M·∫•t t·∫≠p trung v√†o nhi·ªám v·ª• hi·ªán t·∫°i",
    "Bu·ªìn ng·ªß khi ƒëang l√†m vi·ªác",
    "Ch∆°i game" # ƒê·∫£m b·∫£o "Ch∆°i game" c√≥ trong danh s√°ch t·ªïng n√†y
    # C√°c label kh√°c nh∆∞ "Ch∆°i", "Ngh·ªâ ng∆°i", "Gi·∫£i tr√≠" n·∫øu kh√¥ng c√≥ trong 2 nh√≥m tr√™n
    # v√† b·∫°n kh√¥ng mu·ªën theo d√µi ri√™ng th√¨ kh√¥ng c·∫ßn li·ªát k√™ ·ªü ƒë√¢y,
    # v√† logic ph√¢n t√≠ch s·∫Ω b·ªè qua ch√∫ng ho·∫∑c t√≠nh v√†o nh√≥m kh√°c n·∫øu c·∫ßn.
    # D·ª±a tr√™n y√™u c·∫ßu "c√°c ho·∫°t ƒë·ªông t√¥i li·ªát k√™ ·ªü tr√™n l√† t·∫•t c·∫£, kh√¥ng c√≥ trung t√≠nh" cho h√†nh vi,
    # gi·∫£ ƒë·ªãnh danh s√°ch n√†y CH·ªà g·ªìm c√°c label c√≥ √≠ch v√† kh√¥ng c√≥ √≠ch.
    # N·∫øu b·∫°n c√≥ c√°c label h√†nh vi kh√°c KH√îNG thu·ªôc 2 nh√≥m n√†y v√† mu·ªën lo·∫°i b·ªè kh·ªèi ph√¢n t√≠ch,
    # th√¨ danh s√°ch n√†y c√≥ th·ªÉ c·∫ßn li·ªát k√™ t·∫•t c·∫£ c√°c l·ª±a ch·ªçn trong OptionMenu
]

PRODUCTIVE_BEHAVIORS = ["Nghi√™n c·ª©u c√≥ √≠ch", "ƒê·ªçc c√≥ √≠ch", "Vi·∫øt c√≥ √≠ch", "N√≥i/ Thuy·∫øt gi·∫£ng c√≥ √≠ch"]
UNPRODUCTIVE_BEHAVIORS = [
    "Nghi√™n c·ª©u kh√¥ng c√≥ √≠ch",
    "ƒê·ªçc kh√¥ng c√≥ √≠ch",
    "Vi·∫øt kh√¥ng c√≥ √≠ch",
    "N√≥i/ Thuy·∫øt gi·∫£ng kh√¥ng c√≥ √≠ch",
    "M·∫•t t·∫≠p trung v√†o nhi·ªám v·ª• hi·ªán t·∫°i",
    "Bu·ªìn ng·ªß khi ƒëang l√†m vi·ªác",
    "Ch∆°i game" # ƒê·∫£m b·∫£o "Ch∆°i game" c√≥ trong nh√≥m kh√¥ng c√≥ √≠ch
]
# ---------------------------------------------------

def resource_path(relative_path):
    """ L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn t√†i nguy√™n, ho·∫°t ƒë·ªông cho c·∫£ dev v√† PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

class ReminderApp:
    def __init__(self, root_window):
        self.root = root_window
        self.root.title("Tr√¨nh Nh·∫Øc Nh·ªü Ho·∫°t ƒê·ªông & Nhi·ªám v·ª•")
        # self.root.geometry("300x180")
        self.root.resizable(False, False)

        # --- Bi·∫øn tr·∫°ng th√°i nh·∫Øc nh·ªü ho·∫°t ƒë·ªông (c≈©) ---
        self.reminder_interval_ms = DEFAULT_INTERVAL_MINUTES * 60 * 1000
        self.next_reminder_id = None
        self.sleep_until_time = 0
        self.countdown_id = None
        self.is_running = True

        # --- Bi·∫øn tr·∫°ng th√°i nhi·ªám v·ª• (m·ªõi) ---
        self.tasks = [] # [{'name': 'Task Name', 'time': 'HH:MM', 'completed': False, 'alarm_id': None, 'completion_time': None, 'labels': []}] # C·∫≠p nh·∫≠t c·∫•u tr√∫c n·∫øu l∆∞u JSON
        self.task_window = None
        self.task_creation_win = None
        self._temp_tasks_to_add = []

        # --- √Çm thanh v√† Icon ---
        self.sound_path = resource_path(SOUND_FILE)
        self.alert_sound_path = resource_path(ALERT_SOUND)
        # self.task_alarm_sound_path = resource_path("task_alarm.wav") # T√πy ch·ªçn

        try:
            icon_path = resource_path("icon.png")
            if os.path.exists(icon_path):
                 self.root.iconphoto(True, PhotoImage(file=icon_path))
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ t·∫£i icon: {e}")

        # --- Giao di·ªán ---
        self.status_label = tk.Label(root_window, text="ƒêang ch·∫°y...", font=("Helvetica", 10), pady=5)
        self.status_label.pack(fill=tk.X, padx=10)

        self.last_check_label = tk.Label(root_window, text="Ch∆∞a c√≥ l·∫ßn ki·ªÉm tra ho·∫°t ƒë·ªông n√†o.", font=("Helvetica", 9), fg="gray", pady=5)
        self.last_check_label.pack(fill=tk.X, padx=10)

        button_frame = tk.Frame(root_window)
        button_frame.pack(pady=10)

        self.sleep_button = tk.Button(button_frame,
                                       text="üò¥ ƒêi ng·ªß",
                                       command=self.go_to_sleep,
                                       width=10,
                                       bg="lightblue",
                                       fg="black",
                                       activebackground="dodgerblue",
                                       activeforeground="white",
                                       relief="flat")
        self.sleep_button.grid(row=0, column=0, padx=5)

        self.settings_button = tk.Button(button_frame,
                                         text="‚öôÔ∏è C√†i ƒë·∫∑t",
                                         command=self.change_interval,
                                         width=10,
                                         bg="lightgray",
                                         fg="black",
                                         activebackground="gray",
                                         activeforeground="white",
                                         relief="flat")
        self.settings_button.grid(row=0, column=1, padx=5)

        self.stop_button = tk.Button(button_frame,
                                     text="‚èπÔ∏è D·ª´ng",
                                     command=self.stop_program,
                                     width=10,
                                     bg="red",
                                     fg="white",
                                     activebackground="darkred",
                                     activeforeground="white",
                                     relief="flat")
        self.stop_button.grid(row=0, column=2, padx=5)

        self.tasks_button = tk.Button(button_frame,
                                      text="üìù Nhi·ªám v·ª•",
                                      command=self.show_task_window,
                                      width=10,
                                      bg="orange",
                                      fg="black",
                                      activebackground="darkorange",
                                      activeforeground="white",
                                      relief="flat")
        self.tasks_button.grid(row=0, column=3, padx=5)


        self.ensure_activity_log_file()

        self.initialize_tasks()

        # schedule_next_reminder ƒë∆∞·ª£c g·ªçi ·ªü cu·ªëi initialize_tasks()
    
    def ensure_activity_log_file(self):
        """Ki·ªÉm tra v√† t·∫°o file log ho·∫°t ƒë·ªông JSON n·∫øu ch∆∞a c√≥."""
        log_path = resource_path(ACTIVITY_LOG_FILE)
        # N·∫øu file ch∆∞a t·ªìn t·∫°i, t·∫°o file JSON r·ªóng v·ªõi c·∫•u tr√∫c danh s√°ch
        if not os.path.exists(log_path):
            try:
                # Ghi m·ªôt danh s√°ch r·ªóng [] v√†o file JSON
                with open(log_path, 'w', encoding='utf-8') as f:
                    json.dump([], f)
                print(f"ƒê√£ t·∫°o file log ho·∫°t ƒë·ªông: {log_path}")
            except Exception as e:
                messagebox.showerror("L·ªói File Log", f"Kh√¥ng th·ªÉ t·∫°o file {ACTIVITY_LOG_FILE}:\n{e}", parent=self.root)
                self.stop_program() # D·ª´ng n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c file log

    # S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c save_log ƒë·ªÉ nh·∫≠n th√™m tham s·ªë c·∫£m x√∫c v√† ph√¢n lo·∫°i
    def save_log(self, answer, emotion, category):
        """ƒê·ªçc log ho·∫°t ƒë·ªông hi·ªán t·∫°i t·ª´ file JSON, th√™m b·∫£n ghi m·ªõi, v√† l∆∞u l·∫°i to√†n b·ªô file."""
        log_path = resource_path(ACTIVITY_LOG_FILE)
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")

        # B·∫£n ghi ho·∫°t ƒë·ªông m·ªõi d∆∞·ªõi d·∫°ng dictionary
        new_entry = {
            "timestamp": timestamp,
            "activity": answer,
            "emotion": emotion,
            "category": category
        }

        # --- ƒê·ªçc d·ªØ li·ªáu log hi·ªán c√≥ t·ª´ file JSON ---
        log_data = []
        if os.path.exists(log_path):
            try:
                with open(log_path, 'r', encoding='utf-8') as f:
                    # Ki·ªÉm tra file kh√¥ng r·ªóng tr∆∞·ªõc khi load
                    content = f.read()
                    if content:
                         # Gi·∫£i m√£ n·ªôi dung JSON th√†nh danh s√°ch Python
                         log_data = json.loads(content)
                    else:
                         log_data = [] # File t·ªìn t·∫°i nh∆∞ng r·ªóng

            except json.JSONDecodeError as e:
                 # X·ª≠ l√Ω l·ªói n·∫øu file JSON b·ªã h·ªèng
                 print(f"L·ªói gi·∫£i m√£ JSON file log ho·∫°t ƒë·ªông {log_path}: {e}")
                 messagebox.showwarning("L·ªói ƒê·ªçc Log", f"Kh√¥ng th·ªÉ ƒë·ªçc file log ho·∫°t ƒë·ªông (l·ªói JSON):\n{e}\n\nTi·∫øn h√†nh ghi b·∫£n ghi m·ªõi v√†o file tr·ªëng ho·∫∑c ghi ƒë√®.", parent=self.root)
                 log_data = [] # B·ªè qua d·ªØ li·ªáu l·ªói, b·∫Øt ƒë·∫ßu v·ªõi danh s√°ch r·ªóng

            except Exception as e:
                # X·ª≠ l√Ω c√°c l·ªói ƒë·ªçc file kh√°c
                print(f"L·ªói khi ƒë·ªçc file log ho·∫°t ƒë·ªông {log_path}:\n{e}")
                messagebox.showwarning("L·ªói ƒê·ªçc Log", f"Kh√¥ng th·ªÉ ƒë·ªçc file log ho·∫°t ƒë·ªông:\n{e}\n\nTi·∫øn h√†nh ghi b·∫£n ghi m·ªõi v√†o file tr·ªëng ho·∫∑c ghi ƒë√®.", parent=self.root)
                log_data = [] # B·ªè qua d·ªØ li·ªáu l·ªói


        # --- Th√™m b·∫£n ghi m·ªõi v√†o danh s√°ch d·ªØ li·ªáu ƒë√£ ƒë·ªçc ---
        log_data.append(new_entry)

        # --- Ghi l·∫°i to√†n b·ªô danh s√°ch log ƒë√£ c·∫≠p nh·∫≠t v√†o file JSON ---
        try:
            with open(log_path, 'w', encoding='utf-8') as f:
                 # use ensure_ascii=False ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát
                 # use indent=4 ƒë·ªÉ file JSON ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ƒë·∫πp, d·ªÖ ƒë·ªçc h∆°n khi m·ªü b·∫±ng tr√¨nh so·∫°n th·∫£o vƒÉn b·∫£n
                 json.dump(log_data, f, ensure_ascii=False, indent=4)

            print(f"ƒê√£ l∆∞u b·∫£n ghi ho·∫°t ƒë·ªông m·ªõi v√†o file log: {log_path}")
            # C·∫≠p nh·∫≠t Label th·ªùi gian ki·ªÉm tra cu·ªëi (gi·ªØ nguy√™n)
            self.last_check_label.config(text=f"L·∫ßn cu·ªëi ki·ªÉm tra ho·∫°t ƒë·ªông l√∫c: {timestamp}", fg="black")

        except Exception as e:
            # X·ª≠ l√Ω l·ªói ghi file
            print(f"L·ªói khi ghi file log ho·∫°t ƒë·ªông {log_path}:\n{e}")
            messagebox.showwarning("L·ªói Ghi Log", f"Kh√¥ng th·ªÉ ghi file log ho·∫°t ƒë·ªông:\n{e}\n\nB·∫£n ghi c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c l∆∞u.", parent=self.root)


    def play_notification_sound(self):
        """Ph√°t √¢m thanh th√¥ng b√°o nh·∫Øc nh·ªü ho·∫°t ƒë·ªông."""
        try:
            threading.Thread(target=playsound, args=(self.sound_path,), daemon=True).start()
        except Exception as e:
            print(f"L·ªói khi ph√°t √¢m thanh nh·∫Øc nh·ªü '{self.sound_path}': {e}")

    def schedule_next_reminder(self):
        """L√™n l·ªãch cho l·∫ßn nh·∫Øc nh·ªü ho·∫°t ƒë·ªông ti·∫øp theo."""
        if self.next_reminder_id:
            self.root.after_cancel(self.next_reminder_id)
            self.next_reminder_id = None

        if self.is_running and time.time() >= self.sleep_until_time:
            print(f"L√™n l·ªãch nh·∫Øc nh·ªü ho·∫°t ƒë·ªông sau {self.reminder_interval_ms // 1000} gi√¢y.")
            delay_ms = self.reminder_interval_ms
            self.next_reminder_id = self.root.after(delay_ms, self.ask_question)
            if self.countdown_id is None:
                 self.status_label.config(text=f"ƒêang ch·∫°y... Nh·∫Øc nh·ªü sau {delay_ms // 60000} ph√∫t")
        elif self.is_running and time.time() < self.sleep_until_time:
             wake_up_delay = int((self.sleep_until_time - time.time()) * 1000)
             if wake_up_delay < 0:
                 wake_up_delay = 0
             print(f"ƒêang ng·ªß, ki·ªÉm tra l·∫°i sau {wake_up_delay / 1000:.0f} gi√¢y.")
             self.next_reminder_id = self.root.after(wake_up_delay + 500, self.schedule_next_reminder)

    # S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c ask_question ƒë·ªÉ th√™m ch·ªçn c·∫£m x√∫c v√† ph√¢n lo·∫°i
    def ask_question(self):
        """H·ªèi ng∆∞·ªùi d√πng v·ªÅ ho·∫°t ƒë·ªông, c·∫£m x√∫c, ph√¢n lo·∫°i, y√™u c·∫ßu nh·∫≠p, v√† hi·ªÉn th·ªã indicator hi·ªáu su·∫•t."""
        if not self.is_running or time.time() < self.sleep_until_time:
            print("B·ªè qua c·ª≠a s·ªï h·ªèi do ƒëang d·ª´ng ho·∫∑c ng·ªß.")
            if self.is_running and time.time() < self.sleep_until_time:
                 self.schedule_next_reminder()
            return

        self.play_notification_sound()

        ask_win = tk.Toplevel(self.root)
        ask_win.title("Nh·∫≠p Ho·∫°t ƒë·ªông & Tr·∫°ng th√°i")
        ask_win.resizable(False, False)

        try:
            ask_win.attributes("-fullscreen", True)
        except tk.TclError:
            print("C·∫£nh b√°o: Ch·∫ø ƒë·ªô to√†n m√†n h√¨nh Tkinter c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß. Th·ª≠ ph√≥ng to t·ªëi ƒëa.")
            ask_win.state('zoomed')
            ask_win.attributes("-topmost", True)

        ask_win.attributes("-topmost", True)
        ask_win.grab_set()

        content_frame = tk.Frame(ask_win)
        content_frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

        # --- Hi·ªÉn th·ªã c√°c Indicator Hi·ªáu su·∫•t (M·ªöI) ---
        performance_indicators = self.get_performance_indicators()

        # Frame ƒë·ªÉ ch·ª©a c√°c icon v√† th√¥ng b√°o hi·ªáu su·∫•t
        indicator_frame = tk.Frame(content_frame)
        indicator_frame.pack(pady=(0, 20)) # ƒê·∫∑t ·ªü tr√™n c√πng, c√°ch n·ªôi dung b√™n d∆∞·ªõi 20px

        # Label cho Icon ch√≠nh (Quy t·∫Øc 1)
        main_icon_label = tk.Label(indicator_frame, text=performance_indicators['main_status_icon'], font=("Helvetica", 24)) # Icon to h∆°n
        main_icon_label.pack(side=tk.LEFT, padx=10) # ƒê·∫∑t b√™n tr√°i

        # Label cho th√¥ng b√°o ch√≠nh (Quy t·∫Øc 1)
        main_message_label = tk.Label(indicator_frame, text=performance_indicators['main_status_message'], font=("Helvetica", 14))
        main_message_label.pack(side=tk.LEFT, padx=10) # ƒê·∫∑t ·ªü gi·ªØa

        # Label cho Icon xu h∆∞·ªõng (Quy t·∫Øc 2)
        trend_icon_label = tk.Label(indicator_frame, text=performance_indicators['trend_icon'], font=("Helvetica", 24)) # Icon to h∆°n
        trend_icon_label.pack(side=tk.LEFT, padx=10) # ƒê·∫∑t b√™n ph·∫£i

        # --- K·∫øt th√∫c hi·ªÉn th·ªã Indicator ---


        # --- Ph·∫ßn nh·∫≠p Ho·∫°t ƒë·ªông ---
        label_activity = tk.Label(content_frame, text=f"B·∫°n ƒë√£ l√†m g√¨ trong {self.reminder_interval_ms // (60 * 1000)} ph√∫t v·ª´a qua?", font=("Helvetica", 16, "bold"))
        label_activity.pack(pady=(0, 10)) # ƒêi·ªÅu ch·ªânh pady sau indicator frame

        entry_activity = tk.Entry(content_frame, width=60, font=("Helvetica", 14))
        entry_activity.pack(pady=(0, 15))
        entry_activity.focus_set()

        # --- Ph·∫ßn ch·ªçn C·∫£m x√∫c ---
        label_emotion = tk.Label(content_frame, text="C·∫£m x√∫c c·ªßa b·∫°n l√∫c ƒë√≥ l√† g√¨?", font=("Helvetica", 14))
        label_emotion.pack(pady=(10, 0))

        selected_emotion = tk.StringVar(content_frame)
        if EMOTION_LABELS:
            selected_emotion.set(EMOTION_LABELS[0])
        else:
            selected_emotion.set("Kh√¥ng c√≥ l·ª±a ch·ªçn")

        if EMOTION_LABELS:
            emotion_menu = tk.OptionMenu(content_frame, selected_emotion, *EMOTION_LABELS)
        else:
            emotion_menu = tk.OptionMenu(content_frame, selected_emotion, selected_emotion.get())

        emotion_menu.config(font=("Helvetica", 12), width=30)
        emotion_menu.pack(pady=(0, 15))

        # --- Ph·∫ßn ch·ªçn Ph√¢n lo·∫°i h√†nh vi ---
        label_category = tk.Label(content_frame, text="Ph√¢n lo·∫°i h√†nh vi n√†y l√† g√¨?", font=("Helvetica", 14))
        label_category.pack(pady=(10, 0))

        selected_category = tk.StringVar(content_frame)
        if BEHAVIOR_CATEGORIES:
            selected_category.set(BEHAVIOR_CATEGORIES[0])
        else:
            selected_category.set("Kh√¥ng c√≥ l·ª±a ch·ªçn")

        if BEHAVIOR_CATEGORIES:
            category_menu = tk.OptionMenu(content_frame, selected_category, *BEHAVIOR_CATEGORIES)
        else:
            category_menu = tk.OptionMenu(content_frame, selected_category, selected_category.get())

        category_menu.config(font=("Helvetica", 12), width=30)
        category_menu.pack(pady=(0, 20))

        # --- H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t X√°c nh·∫≠n ho·∫∑c Enter ---
        def submit_answer():
            answer = entry_activity.get().strip()
            emotion = selected_emotion.get()
            category = selected_category.get()

            if not answer:
                messagebox.showwarning("Th√¥ng tin c·∫ßn thi·∫øt", "Vui l√≤ng nh·∫≠p ho·∫°t ƒë·ªông c·ªßa b·∫°n tr∆∞·ªõc khi x√°c nh·∫≠n.", parent=ask_win)
                entry_activity.focus_set()
                return

            self.save_log(answer, emotion, category)
            ask_win.destroy()
            self.schedule_next_reminder()

        # N√∫t X√°c nh·∫≠n
        submit_button = tk.Button(content_frame, text="X√°c nh·∫≠n", command=submit_answer, width=15, font=("Helvetica", 14))
        submit_button.pack(pady=10)

        entry_activity.bind("<Return>", lambda event: submit_answer())

        def prevent_closing():
             messagebox.showwarning("Kh√¥ng th·ªÉ ƒë√≥ng", "B·∫°n c·∫ßn nh·∫≠p ho·∫°t ƒë·ªông c·ªßa m√¨nh v√† nh·∫•n 'X√°c nh·∫≠n' ho·∫∑c Enter.", parent=ask_win)
             entry_activity.focus_set()

        ask_win.protocol("WM_DELETE_WINDOW", prevent_closing)

    def go_to_sleep(self):
        """T·∫°m d·ª´ng nh·∫Øc nh·ªü ho·∫°t ƒë·ªông trong m·ªôt kho·∫£ng th·ªùi gian."""
        if self.countdown_id:
             messagebox.showinfo("Th√¥ng b√°o", "ƒêang trong ch·∫ø ƒë·ªô ng·ªß r·ªìi.", parent=self.root)
             return

        minutes = simpledialog.askinteger("ƒêi ng·ªß", "B·∫°n mu·ªën ngh·ªâ trong bao nhi√™u ph√∫t?",
                                          minvalue=1, maxvalue=1440, parent=self.root)
        if minutes is not None:
            if self.next_reminder_id:
                self.root.after_cancel(self.next_reminder_id)
                self.next_reminder_id = None
                print("ƒê√£ h·ªßy l·ªãch nh·∫Øc nh·ªü ho·∫°t ƒë·ªông do ƒëi ng·ªß.")

            self.sleep_until_time = time.time() + minutes * 60
            messagebox.showinfo("Th√¥ng b√°o", f"S·∫Ω kh√¥ng nh·∫Øc nh·ªü ho·∫°t ƒë·ªông trong {minutes} ph√∫t t·ªõi.", parent=self.root)
            self.update_countdown()


    def update_countdown(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c th·ªùi gian ng·ªß tr√™n status_label."""
        if self.countdown_id:
            self.root.after_cancel(self.countdown_id)
            self.countdown_id = None

        remaining = int(self.sleep_until_time - time.time())

        if remaining > 0:
            mins, secs = divmod(remaining, 60)
            self.status_label.config(text=f"üò¥ ƒêang ng·ªß: c√≤n {mins:02d}:{secs:02d}")
            self.countdown_id = self.root.after(1000, self.update_countdown)
        else:
            self.status_label.config(text="ƒê√£ th·ª©c d·∫≠y!")
            self.sleep_until_time = 0
            self.countdown_id = None
            print("H·∫øt gi·ªù ng·ªß.")
            self.schedule_next_reminder()


    def change_interval(self):
        """Thay ƒë·ªïi kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn nh·∫Øc nh·ªü ho·∫°t ƒë·ªông."""
        current_interval_min = self.reminder_interval_ms // (60 * 1000)
        new_minutes = simpledialog.askinteger("C√†i ƒë·∫∑t th·ªùi gian",
                                              f"Nh·∫≠p kho·∫£ng th·ªùi gian nh·∫Øc nh·ªü ho·∫°t ƒë·ªông (ph√∫t):\n(Hi·ªán t·∫°i: {current_interval_min} ph√∫t)",
                                              minvalue=1, maxvalue=120, parent=self.root,
                                              initialvalue=current_interval_min)
        if new_minutes is not None and new_minutes != current_interval_min:
            self.reminder_interval_ms = new_minutes * 60 * 1000
            messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ c·∫≠p nh·∫≠t kho·∫£ng th·ªùi gian nh·∫Øc nh·ªü ho·∫°t ƒë·ªông th√†nh {new_minutes} ph√∫t.", parent=self.root)
            print(f"ƒê√£ ƒë·ªïi kho·∫£ng th·ªùi gian nh·∫Øc nh·ªü ho·∫°t ƒë·ªông th√†nh {new_minutes} ph√∫t.")
            if time.time() >= self.sleep_until_time:
                 self.schedule_next_reminder()

    # --- Ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn Nhi·ªám v·ª• ---
    # initialize_tasks, get_today_todo_filepath, check_and_load_todolist, save_todolist,
    # play_alert_sound, show_task_window, show_task_creation_window,
    # add_task_from_entries, save_and_close_task_creation,
    # schedule_task_alarms, trigger_task_alarm, cancel_task_alarm, cancel_all_task_alarms
    # C√°c ph∆∞∆°ng th·ª©c n√†y gi·ªØ nguy√™n nh∆∞ trong m√£ tr∆∞·ªõc ƒë√≥
    # (c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh l·∫°i show_task_window v√† c√°c h√†m qu·∫£n l√Ω nhi·ªám v·ª• sau khi chuy·ªÉn sang JSON)

    def initialize_tasks(self):
        """Ki·ªÉm tra file todolist c·ªßa h√¥m nay, t·∫£i nhi·ªám v·ª• n·∫øu c√≥ v√† l√™n l·ªãch b√°o th·ª©c."""
        print("ƒêang ki·ªÉm tra v√† t·∫£i nhi·ªám v·ª•...")
        # --- L∆∞u √Ω: check_and_load_todolist hi·ªán t·∫°i ch·ªâ ƒë·ªçc TXT, c·∫ßn chuy·ªÉn sang JSON ---
        tasks_exist = self.check_and_load_todolist()

        if not tasks_exist or not self.tasks:
            print("Kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª• ho·∫∑c file tr·ªëng. Ph√°t c·∫£nh b√°o v√† y√™u c·∫ßu t·∫°o.")
            self.play_alert_sound()
            messagebox.showinfo("Th√¥ng b√°o Nhi·ªám v·ª•",
                                f"Kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª• cho h√¥m nay ({datetime.date.today().strftime('%d/%m/%Y')}). Vui l√≤ng t·∫°o nhi·ªám v·ª• m·ªõi.",
                                parent=self.root)
        else:
             print("ƒê√£ t·∫£i nhi·ªám v·ª•. ƒêang l√™n l·ªãch b√°o th·ª©c...")
             # --- L∆∞u √Ω: schedule_task_alarms d·ª±a tr√™n c·∫•u tr√∫c task hi·ªán t·∫°i (ch∆∞a c√≥ completion_time, labels) ---
             self.schedule_task_alarms()

        self.schedule_next_reminder()

    def get_today_todo_filepath(self):
        """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file nhi·ªám v·ª• c·ªßa ng√†y h√¥m nay (YYYYMMDD.json)."""
        today_str = datetime.date.today().strftime("%Y%m%d")
        # --- ƒê·ªïi ƒëu√¥i file nhi·ªám v·ª• sang .json ---
        filename = f"{TODO_FILE_PREFIX}{today_str}.json"
        # --------------------------------------
        return resource_path(filename)
    
    def check_and_load_todolist(self):
        """Ki·ªÉm tra file nhi·ªám v·ª• JSON c·ªßa h√¥m nay, t·∫£i n·ªôi dung n·∫øu c√≥.
           Tr·∫£ v·ªÅ True n·∫øu file t·ªìn t·∫°i v√† kh√¥ng c√≥ l·ªói ƒë·ªçc, False n·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói."""
        filepath = self.get_today_todo_filepath() # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n file .json
        self.tasks = [] # X√≥a danh s√°ch nhi·ªám v·ª• hi·ªán t·∫°i tr∆∞·ªõc khi t·∫£i

        if os.path.exists(filepath):
            print(f"T√¨m th·∫•y file nhi·ªám v·ª•: {filepath}")
            try:
                # --- ƒê·ªçc file JSON ---
                with open(filepath, 'r', encoding='utf-8') as f:
                    # Ki·ªÉm tra file kh√¥ng r·ªóng tr∆∞·ªõc khi load
                    content = f.read()
                    if content:
                         # Parse n·ªôi dung JSON th√†nh danh s√°ch c√°c dictionary Python
                         self.tasks = json.loads(content)
                    else:
                         self.tasks = [] # File r·ªóng, danh s√°ch nhi·ªám v·ª• tr·ªëng

                # --- X·ª≠ l√Ω t∆∞∆°ng th√≠ch ng∆∞·ª£c v√† th√™m c√°c kh√≥a m·∫∑c ƒë·ªãnh n·∫øu file c≈© thi·∫øu ---
                # ƒêi·ªÅu n√†y gi√∫p ·ª©ng d·ª•ng ho·∫°t ƒë·ªông v·ªõi file JSON c≈© h∆°n (n·∫øu c√≥)
                for task in self.tasks:
                    # alarm_id kh√¥ng ƒë∆∞·ª£c l∆∞u trong file, c·∫ßn kh·ªüi t·∫°o l·∫°i m·ªói l·∫ßn t·∫£i
                    task['alarm_id'] = None
                    # Th√™m c√°c kh√≥a m·ªõi n·∫øu file JSON c≈© kh√¥ng c√≥ ch√∫ng (ƒë·∫£m b·∫£o c·∫•u tr√∫c ƒë·ªìng nh·∫•t)
                    if 'completed' not in task:
                        task['completed'] = False # M·∫∑c ƒë·ªãnh l√† False n·∫øu kh√¥ng c√≥
                    if 'completion_time' not in task:
                         task['completion_time'] = None # M·∫∑c ƒë·ªãnh l√† None n·∫øu kh√¥ng c√≥
                    if 'labels' not in task:
                         task['labels'] = [] # M·∫∑c ƒë·ªãnh l√† danh s√°ch r·ªóng n·∫øu kh√¥ng c√≥
                    if 'scheduled_time' not in task:
                         # M·∫∑c ƒë·ªãnh scheduled_time l·∫•y t·ª´ 'time' n·∫øu kh√¥ng c√≥ kh√≥a scheduled_time
                         task['scheduled_time'] = task.get('time')
                    # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t kh√≥a 'name' v√† 'time' ƒë·ªÉ nhi·ªám v·ª• h·ª£p l·ªá
                    if 'name' not in task or 'time' not in task:
                         print(f"C·∫£nh b√°o: Nhi·ªám v·ª• c√≥ c·∫•u tr√∫c kh√¥ng ƒë·∫ßy ƒë·ªß b·ªã b·ªè qua khi t·∫£i: {task}")
                         # S·ª≠ d·ª•ng list slicing ho·∫∑c list comprehension ƒë·ªÉ x√≥a an to√†n khi l·∫∑p
                         continue # B·ªè qua nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá trong v√≤ng l·∫∑p for

                # Sau v√≤ng l·∫∑p, l·ªçc l·∫°i danh s√°ch self.tasks ƒë·ªÉ b·ªè c√°c nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá
                self.tasks = [task for task in self.tasks if 'name' in task and 'time' in task]


                print(f"ƒê√£ t·∫£i {len(self.tasks)} nhi·ªám v·ª• t·ª´ file JSON.")
                return True
            except json.JSONDecodeError as e:
                 print(f"L·ªói gi·∫£i m√£ JSON file nhi·ªám v·ª• {filepath}: {e}")
                 messagebox.showerror("L·ªói File Nhi·ªám v·ª•", f"Kh√¥ng th·ªÉ ƒë·ªçc file nhi·ªám v·ª• {filepath} (l·ªói JSON):\n{e}", parent=self.root)
                 # T√πy ch·ªçn: ƒê·ªïi t√™n file b·ªã l·ªói ƒë·ªÉ kh√¥ng ƒë·ªçc l·∫°i l·∫ßn sau v√† cho ng∆∞·ªùi d√πng ki·ªÉm tra
                 # os.rename(filepath, filepath + ".backup." + time.strftime("%Y%m%d%H%M%S"))
                 return False
            except Exception as e:
                print(f"L·ªói khi ƒë·ªçc file nhi·ªám v·ª• {filepath}:\n{e}")
                messagebox.showerror("L·ªói File Nhi·ªám v·ª•", f"Kh√¥ng th·ªÉ ƒë·ªçc file nhi·ªám v·ª• {filepath}:\n{e}", parent=self.root)
                return False
        else:
            print(f"Kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª•: {filepath}")
            return False # File kh√¥ng t·ªìn t·∫°i

    def save_todolist(self):
        """L∆∞u danh s√°ch nhi·ªám v·ª• hi·ªán t·∫°i (t·ª´ self.tasks) v√†o file JSON c·ªßa ng√†y h√¥m nay."""
        
        filepath = self.get_today_todo_filepath() # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n file .json

        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ l∆∞u: lo·∫°i b·ªè c√°c kh√≥a kh√¥ng c·∫ßn thi·∫øt (nh∆∞ alarm_id)
        tasks_to_save = []
        for task in self.tasks:
            task_copy = task.copy() # T·∫°o b·∫£n sao ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn dictionary g·ªëc
            # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa kh√≥a 'alarm_id' tr∆∞·ªõc khi c·ªë g·∫Øng x√≥a
            if 'alarm_id' in task_copy:
                del task_copy['alarm_id'] # ID b√°o th·ª©c ch·ªâ t·ªìn t·∫°i khi ·ª©ng d·ª•ng ch·∫°y, kh√¥ng l∆∞u v√†o file

            # Th√™m b·∫£n sao ƒë√£ lo·∫°i b·ªè 'alarm_id' v√†o danh s√°ch s·∫Ω ghi ra file
            tasks_to_save.append(task_copy)

        try:
            # --- Ghi file JSON ---
            # use ensure_ascii=False ƒë·ªÉ Python ghi k√Ω t·ª± ti·∫øng Vi·ªát m√† kh√¥ng m√£ h√≥a (v√≠ d·ª•: \u1ef9)
            # use indent=4 ƒë·ªÉ file JSON ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ƒë·∫πp, d·ªÖ ƒë·ªçc h∆°n khi m·ªü b·∫±ng tr√¨nh so·∫°n th·∫£o vƒÉn b·∫£n
            with open(filepath, 'w', encoding='utf-8') as f:
                 json.dump(tasks_to_save, f, ensure_ascii=False, indent=4)
            print(f"ƒê√£ l∆∞u {len(tasks_to_save)} nhi·ªám v·ª• v√†o file JSON: {filepath}")
        except Exception as e:
            print(f"L·ªói khi ghi file nhi·ªám v·ª• {filepath}: {e}")
            messagebox.showerror("L·ªói L∆∞u Nhi·ªám v·ª•", f"Kh√¥ng th·ªÉ ghi file nhi·ªám v·ª• {filepath}:\n{e}", parent=self.root)
    
    def play_alert_sound(self):
        """Ph√°t √¢m thanh c·∫£nh b√°o (khi kh√¥ng t√¨m th·∫•y file nhi·ªám v·ª•)."""
        try:
            if os.path.exists(self.alert_sound_path):
                threading.Thread(target=playsound, args=(self.alert_sound_path,), daemon=True).start()
            else:
                print(f"Kh√¥ng t√¨m th·∫•y file √¢m thanh c·∫£nh b√°o: {self.alert_sound_path}")
        except Exception as e:
            print(f"L·ªói khi ph√°t √¢m thanh c·∫£nh b√°o '{self.alert_sound_path}': {e}")

    def show_task_window(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï qu·∫£n l√Ω/xem nhi·ªám v·ª• c·ªßa h√¥m nay."""
        if self.task_window is None or not self.task_window.winfo_exists():
            self.task_window = tk.Toplevel(self.root)
            self.task_window.title(f"Nhi·ªám v·ª• h√¥m nay ({datetime.date.today().strftime('%d/%m/%Y')})")
            self.task_window.transient(self.root)
            self.task_window.grab_set()

            label = tk.Label(self.task_window, text="Danh s√°ch nhi·ªám v·ª• c·ªßa b·∫°n:")
            label.pack(pady=5)

            add_button = tk.Button(self.task_window, text="‚ûï Th√™m Nhi·ªám v·ª• m·ªõi", command=self.show_task_creation_window)
            add_button.pack(pady=5)

            # --- C·∫ßn tri·ªÉn khai hi·ªÉn th·ªã danh s√°ch nhi·ªám v·ª• JSON ·ªü ƒë√¢y ---
            self.display_tasks_in_window() # H√†m m·ªõi ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt
            # ------------------------------------------------------------

            close_button = tk.Button(self.task_window, text="ƒê√≥ng", command=self.task_window.destroy)
            close_button.pack(pady=10)

            self.task_window.protocol("WM_DELETE_WINDOW", self.task_window.destroy)


        self.task_window.lift()

    # --- Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ hi·ªÉn th·ªã nhi·ªám v·ª• trong c·ª≠a s·ªï xem ---
    def display_tasks_in_window(self):
        """Hi·ªÉn th·ªã chi ti·∫øt c√°c nhi·ªám v·ª• trong c·ª≠a s·ªï task_window."""
        # X√≥a n·ªôi dung hi·ªÉn th·ªã c≈© n·∫øu c√≥
        for widget in self.task_window.winfo_children():
            if getattr(widget, '_is_task_display', False): # ƒê√°nh d·∫•u c√°c widget hi·ªÉn th·ªã nhi·ªám v·ª•
                widget.destroy()

        if not self.tasks:
             no_tasks_label = tk.Label(self.task_window, text="Ch∆∞a c√≥ nhi·ªám v·ª• n√†o ƒë∆∞·ª£c th√™m cho h√¥m nay.", fg="gray")
             no_tasks_label.pack(pady=10)
             setattr(no_tasks_label, '_is_task_display', True) # ƒê√°nh d·∫•u ƒë·ªÉ x√≥a sau
        else:
             # --- HI·ªÇN TH·ªä DANH S√ÅCH NHI·ªÜM V·ª§ (C·∫¶N TRI·ªÇN KHAI TH√äM) ---
             # T·∫°o Frame ho·∫∑c Canvas c√≥ Scrollbar n·∫øu danh s√°ch d√†i
             task_display_frame = tk.Frame(self.task_window)
             task_display_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
             setattr(task_display_frame, '_is_task_display', True) # ƒê√°nh d·∫•u ƒë·ªÉ x√≥a

             # C·∫ßn v√≤ng l·∫∑p ƒë·ªÉ t·∫°o widget (Label, Checkbutton/Button) cho t·ª´ng nhi·ªám v·ª•
             for i, task in enumerate(self.tasks):
                 task_frame = tk.Frame(task_display_frame) # Frame cho m·ªói nhi·ªám v·ª•
                 task_frame.pack(fill=tk.X, pady=2)

                 # --- Hi·ªÉn th·ªã th√¥ng tin nhi·ªám v·ª• ---
                 # C·∫ßn x·ª≠ l√Ω hi·ªÉn th·ªã tr·∫°ng th√°i ho√†n th√†nh v√† nh√£n
                 status_char = "‚úÖ" if task.get('completed', False) else "‚¨ú" # L·∫•y tr·∫°ng th√°i, m·∫∑c ƒë·ªãnh l√† False
                 task_text = f"{status_char} {task.get('time', 'N/A')} - {task.get('name', 'Kh√¥ng t√™n')}"
                 labels_text = ", ".join(task.get('labels', [])) # L·∫•y danh s√°ch nh√£n
                 if labels_text:
                      task_text += f" [{labels_text}]"

                 task_label = tk.Label(task_frame, text=task_text, anchor='w')
                 # √Åp d·ª•ng style n·∫øu ƒë√£ ho√†n th√†nh
                 if task.get('completed', False):
                     task_label.config(fg="gray", font=("Helvetica", 10, "overstrike")) # G·∫°ch ngang v√† m√†u x√°m


                 task_label.pack(side=tk.LEFT, fill=tk.X, expand=True)

                 # --- Th√™m n√∫t ho·∫∑c Checkbutton ƒë·ªÉ ƒë√°nh d·∫•u ho√†n th√†nh (C·∫¶N TRI·ªÇN KHAI LOGIC) ---
                 if not task.get('completed', False): # Ch·ªâ hi·ªÉn th·ªã n√∫t ho√†n th√†nh n·∫øu ch∆∞a xong
                     complete_button = tk.Button(task_frame, text="Ho√†n th√†nh", command=lambda t=task: self.mark_task_completed(t)) # C·∫ßn vi·∫øt h√†m mark_task_completed
                     complete_button.pack(side=tk.RIGHT)


             # --- K·∫æT TH√öC HI·ªÇN TH·ªä DANH S√ÅCH NHI·ªÜM V·ª§ ---


    def show_task_creation_window(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p nhi·ªám v·ª• m·ªõi."""
        if self.task_creation_win is None or not self.task_creation_win.winfo_exists():
            self.task_creation_win = tk.Toplevel(self.root)
            self.task_creation_win.title("T·∫°o Nhi·ªám v·ª• m·ªõi")
            self.task_creation_win.geometry("400x350") # TƒÉng k√≠ch th∆∞·ªõc ƒë·ªÉ ch·ª©a label
            self.task_creation_win.transient(self.root)
            self.task_creation_win.grab_set()

            self._temp_tasks_to_add = []

            tk.Label(self.task_creation_win, text="T√™n Nhi·ªám v·ª•:").pack(pady=(10,0))
            task_name_entry = tk.Entry(self.task_creation_win, width=40)
            task_name_entry.pack(pady=(0,5))
            task_name_entry.focus_set()

            tk.Label(self.task_creation_win, text="Th·ªùi gian (HH:MM - 24h):").pack(pady=(10,0))
            task_time_entry = tk.Entry(self.task_creation_win, width=10)
            task_time_entry.pack(pady=(0,5))

            # --- Ph·∫ßn nh·∫≠p Nh√£n/Ph√¢n lo·∫°i Nhi·ªám v·ª• (M·ªöI) ---
            tk.Label(self.task_creation_win, text="Nh√£n/Ph√¢n lo·∫°i (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y):").pack(pady=(10,0))
            task_labels_entry = tk.Entry(self.task_creation_win, width=40)
            task_labels_entry.pack(pady=(0,5))
            # -----------------------------------------------


            button_frame = tk.Frame(self.task_creation_win)
            button_frame.pack(pady=10)

            add_button = tk.Button(button_frame, text="‚ûï Th√™m v√†o danh s√°ch t·∫°m",
                                   command=lambda: self.add_task_from_entries(task_name_entry, task_time_entry, task_labels_entry)) # Truy·ªÅn th√™m entry nh√£n
            add_button.grid(row=0, column=0, padx=5)

            save_button = tk.Button(button_frame, text="üíæ L∆∞u t·∫•t c·∫£ v√† ƒê√≥ng",
                                    command=self.save_and_close_task_creation)
            save_button.grid(row=0, column=1, padx=5)

            cancel_button = tk.Button(button_frame, text="‚ùå H·ªßy",
                                      command=self.task_creation_win.destroy)
            cancel_button.grid(row=0, column=2, padx=5)

            self.task_creation_win.protocol("WM_DELETE_WINDOW", self.task_creation_win.destroy)


        self.task_creation_win.lift()


    # S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c add_task_from_entries ƒë·ªÉ l·∫•y v√† x·ª≠ l√Ω nh√£n
    def add_task_from_entries(self, task_name_entry, task_time_entry, task_labels_entry): # Th√™m tham s·ªë entry nh√£n
        """L·∫•y d·ªØ li·ªáu t·ª´ Entry trong c·ª≠a s·ªï t·∫°o nhi·ªám v·ª•, validate v√† th√™m v√†o danh s√°ch t·∫°m th·ªùi."""
        name = task_name_entry.get().strip()
        time_str = task_time_entry.get().strip()
        labels_str = task_labels_entry.get().strip() # L·∫•y chu·ªói nh√£n

        if not name:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n nhi·ªám v·ª•.", parent=self.task_creation_win)
            return
        if not time_str:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p th·ªùi gian nhi·ªám v·ª• (HH:MM).", parent=self.task_creation_win)
            return

        # X√°c th·ª±c ƒë·ªãnh d·∫°ng th·ªùi gian c∆° b·∫£n (HH:MM)
        try:
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours <= 23 and 0 <= minutes <= 59):
                 raise ValueError("Gi·ªù ho·∫∑c ph√∫t kh√¥ng h·ª£p l·ªá")
            datetime.datetime.strptime(time_str, "%H:%M") # Ki·ªÉm tra ƒë·ªãnh d·∫°ng
        except ValueError:
            messagebox.showwarning("Sai ƒë·ªãnh d·∫°ng", "Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 09:00, 14:30).", parent=self.task_creation_win)
            return

        # X·ª≠ l√Ω chu·ªói nh√£n th√†nh danh s√°ch
        labels = [label.strip() for label in labels_str.split(',') if label.strip()] # T√°ch b·∫±ng d·∫•u ph·∫©y, lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† m·ª•c r·ªóng

        # Th√™m nhi·ªám v·ª• v√†o danh s√°ch t·∫°m th·ªùi v·ªõi c√°c kh√≥a m·ªõi
        self._temp_tasks_to_add.append({
            'name': name,
            'time': time_str, # Th·ªùi gian d·ª± ki·∫øn HH:MM
            'scheduled_time': time_str, # Th·ªùi gian th·ª±c t·∫ø l√™n l·ªãch (c√≥ th·ªÉ kh√°c time n·∫øu c·∫ßn ƒëi·ªÅu ch·ªânh) - L∆∞u v√†o file
            'completed': False, # Ban ƒë·∫ßu l√† ch∆∞a ho√†n th√†nh
            'completion_time': None, # Ban ƒë·∫ßu ch∆∞a c√≥ th·ªùi gian ho√†n th√†nh
            'labels': labels, # Danh s√°ch c√°c nh√£n
            'alarm_id': None # ID b√°o th·ª©c (ch·ªâ d√πng runtime)
        })
        print(f"ƒê√£ th√™m t·∫°m nhi·ªám v·ª•: {name} l√∫c {time_str} v·ªõi nh√£n {labels}")

        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m t·∫°m nhi·ªám v·ª• '{name}' v√†o danh s√°ch ch·ªù l∆∞u.", parent=self.task_creation_win)
        task_name_entry.delete(0, tk.END)
        task_time_entry.delete(0, tk.END)
        task_labels_entry.delete(0, tk.END) # X√≥a √¥ nh√£n
        task_name_entry.focus_set()

    def save_and_close_task_creation(self):
        """L∆∞u t·∫•t c·∫£ c√°c nhi·ªám v·ª• t·ª´ danh s√°ch t·∫°m th·ªùi v√†o danh s√°ch ch√≠nh v√† file, sau ƒë√≥ ƒë√≥ng c·ª≠a s·ªï t·∫°o."""
        if not self._temp_tasks_to_add:
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a c√≥ nhi·ªám v·ª• m·ªõi n√†o ƒë∆∞·ª£c th√™m ƒë·ªÉ l∆∞u.", parent=self.task_creation_win)
            self.task_creation_win.destroy()
            return

        self.tasks.extend(self._temp_tasks_to_add)
        self._temp_tasks_to_add = []

        # --- L∆∞u danh s√°ch nhi·ªám v·ª• ch√≠nh v√†o file JSON ---
        self.save_todolist()

        # --- H·ªßy b√°o th·ª©c c≈© v√† l√™n l·ªãch l·∫°i cho T·∫§T C·∫¢ nhi·ªám v·ª• ---
        self.cancel_all_task_alarms()
        self.schedule_task_alarms()

        # --- C·∫≠p nh·∫≠t hi·ªÉn th·ªã trong c·ª≠a s·ªï xem nhi·ªám v·ª• n·∫øu n√≥ ƒëang m·ªü ---
        if self.task_window and self.task_window.winfo_exists():
             self.display_tasks_in_window() # G·ªçi h√†m hi·ªÉn th·ªã ƒë·ªÉ l√†m m·ªõi


        messagebox.showinfo("L∆∞u th√†nh c√¥ng", f"ƒê√£ l∆∞u t·ªïng c·ªông {len(self.tasks)} nhi·ªám v·ª• v√†o file.", parent=self.task_creation_win)
        self.task_creation_win.destroy()

    # --- Ph∆∞∆°ng th·ª©c c·∫ßn vi·∫øt ƒë·ªÉ x·ª≠ l√Ω ƒë√°nh d·∫•u ho√†n th√†nh (M·ªöI) ---
    def mark_task_completed(self, task_to_complete):
        """ƒê√°nh d·∫•u m·ªôt nhi·ªám v·ª• l√† ƒë√£ ho√†n th√†nh v√† ghi l·∫°i th·ªùi gian."""
        for task in self.tasks:
            # T√¨m ƒë√∫ng nhi·ªám v·ª• trong danh s√°ch
            # C·∫ßn m·ªôt c√°ch nh·∫≠n d·∫°ng nhi·ªám v·ª• duy nh·∫•t n·∫øu c√≥ nhi·ªÅu nhi·ªám v·ª• c√πng t√™n/th·ªùi gian
            # T·∫°m th·ªùi so s√°nh c·∫£ t√™n v√† th·ªùi gian
            if task['name'] == task_to_complete['name'] and task['time'] == task_to_complete['time'] and not task['completed']:
                task['completed'] = True
                task['completion_time'] = time.strftime("%Y-%m-%d %H:%M:%S") # Ghi l·∫°i th·ªùi gian ho√†n th√†nh
                self.cancel_task_alarm(task) # H·ªßy b√°o th·ª©c n·∫øu c√≥
                self.save_todolist() # L∆∞u l·∫°i thay ƒë·ªïi v√†o file
                print(f"ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh nhi·ªám v·ª•: {task['name']} l√∫c {task['completion_time']}")

                # C·∫≠p nh·∫≠t hi·ªÉn th·ªã trong c·ª≠a s·ªï xem nhi·ªám v·ª•
                if self.task_window and self.task_window.winfo_exists():
                     self.display_tasks_in_window() # L√†m m·ªõi hi·ªÉn th·ªã

                messagebox.showinfo("Ho√†n th√†nh Nhi·ªám v·ª•", f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª•:\n'{task['name']}'", parent=self.root)
                return # Tho√°t sau khi t√¨m th·∫•y v√† x·ª≠ l√Ω


    def schedule_task_alarms(self):
        """L√™n l·ªãch b√°o th·ª©c cho t·∫•t c·∫£ c√°c nhi·ªám v·ª• ch∆∞a ho√†n th√†nh trong self.tasks."""
        now = datetime.datetime.now()
        today = now.date()
        print(f"ƒêang l√™n l·ªãch b√°o th·ª©c nhi·ªám v·ª• t·ª´ {len(self.tasks)} nhi·ªám v·ª•...")

        for task in self.tasks:
            # Ch·ªâ l√™n l·ªãch cho nhi·ªám v·ª• ch∆∞a ho√†n th√†nh v√† ch∆∞a c√≥ b√°o th·ª©c
            if not task.get('completed', False) and task.get('alarm_id') is None:
                try:
                    # L·∫•y th·ªùi gian l√™n l·ªãch t·ª´ kh√≥a 'scheduled_time' ho·∫∑c 'time' n·∫øu kh√¥ng c√≥
                    task_time_str = task.get('scheduled_time', task.get('time'))
                    if not task_time_str:
                         print(f"Nhi·ªám v·ª• '{task.get('name', 'Kh√¥ng t√™n')}' thi·∫øu th·ªùi gian. B·ªè qua l√™n l·ªãch.")
                         continue

                    task_hour, task_minute = map(int, task_time_str.split(':'))
                    task_datetime = datetime.datetime.combine(today, datetime.time(task_hour, task_minute))

                    # N·∫øu th·ªùi gian nhi·ªám v·ª• ƒë√£ tr√¥i qua trong ng√†y h√¥m nay, kh√¥ng l√™n l·ªãch
                    if task_datetime <= now:
                        print(f"B·ªè qua l√™n l·ªãch cho nhi·ªám v·ª• '{task.get('name', 'Kh√¥ng t√™n')}' l√∫c {task_time_str} v√¨ ƒë√£ tr√¥i qua.")
                        continue

                    time_difference = task_datetime - now
                    delay_ms = int(time_difference.total_seconds() * 1000)

                    if delay_ms > 0:
                        task['alarm_id'] = self.root.after(delay_ms, lambda t=task: self.trigger_task_alarm(t))
                        print(f"ƒê√£ l√™n l·ªãch b√°o th·ª©c cho '{task.get('name', 'Kh√¥ng t√™n')}' l√∫c {task_time_str} (sau {delay_ms / 1000:.0f}s).")
                    else:
                         print(f"Th·ªùi gian cho nhi·ªám v·ª• '{task.get('name', 'Kh√¥ng t√™n')}' l√∫c {task_time_str} qu√° g·∫ßn ho·∫∑c ƒë√£ tr√¥i qua. B·ªè qua l√™n l·ªãch.")

                except ValueError:
                    print(f"L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian cho nhi·ªám v·ª• '{task.get('name', 'Kh√¥ng t√™n')}': {task_time_str}. B·ªè qua l√™n l·ªãch.")
                except Exception as e:
                    print(f"L·ªói khi l√™n l·ªãch b√°o th·ª©c cho '{task.get('name', 'Kh√¥ng t√™n')}': {e}")


    def trigger_task_alarm(self, task):
        """K√≠ch ho·∫°t b√°o th·ª©c cho m·ªôt nhi·ªám v·ª• c·ª• th·ªÉ."""
        print(f"ƒê√£ ƒë·∫øn gi·ªù nhi·ªám v·ª•: {task.get('name', 'Kh√¥ng t√™n')}")

        self.play_notification_sound()

        messagebox.showinfo("‚è∞ B√°o th·ª©c Nhi·ªám v·ª•", f"ƒê√£ ƒë·∫øn gi·ªù th·ª±c hi·ªán nhi·ªám v·ª•:\n\n{task.get('name', 'Kh√¥ng t√™n')}", parent=self.root)

        task['alarm_id'] = None # ƒê·∫∑t l·∫°i ID sau khi b√°o th·ª©c k√™u

        # C·∫≠p nh·∫≠t hi·ªÉn th·ªã trong c·ª≠a s·ªï xem nhi·ªám v·ª•
        if self.task_window and self.task_window.winfo_exists():
             self.display_tasks_in_window()


    def cancel_task_alarm(self, task):
        """H·ªßy b√°o th·ª©c cho m·ªôt nhi·ªám v·ª• c·ª• th·ªÉ n·∫øu n√≥ ƒëang ch·ªù."""
        if task.get('alarm_id') is not None:
            try:
                self.root.after_cancel(task['alarm_id'])
                print(f"ƒê√£ h·ªßy b√°o th·ª©c cho nhi·ªám v·ª• '{task.get('name', 'Kh√¥ng t√™n')}'.")
            except Exception as e:
                print(f"L·ªói khi h·ªßy b√°o th·ª©c '{task.get('name', 'Kh√¥ng t√™n')}' (ID: {task['alarm_id']}): {e}")
            task['alarm_id'] = None # Lu√¥n ƒë·∫∑t ID v·ªÅ None sau khi h·ªßy ho·∫∑c th·ª≠ h·ªßy

    def cancel_all_task_alarms(self):
        """H·ªßy t·∫•t c·∫£ b√°o th·ª©c nhi·ªám v·ª• ƒëang ch·ªù."""
        print("ƒêang h·ªßy t·∫•t c·∫£ b√°o th·ª©c nhi·ªám v·ª•...")
        for task in self.tasks:
            self.cancel_task_alarm(task)
        print("ƒê√£ h·ªßy t·∫•t c·∫£ b√°o th·ª©c nhi·ªám v·ª•.")

    def stop_program(self):
        """D·ª´ng ·ª©ng d·ª•ng ho√†n to√†n."""
        print("Y√™u c·∫ßu d·ª´ng ·ª©ng d·ª•ng.")
        self.is_running = False

        if self.next_reminder_id:
            self.root.after_cancel(self.next_reminder_id)
            self.next_reminder_id = None
            print("ƒê√£ h·ªßy l·ªãch nh·∫Øc nh·ªü ho·∫°t ƒë·ªông cu·ªëi c√πng.")
        if self.countdown_id:
            self.root.after_cancel(self.countdown_id)
            self.countdown_id = None
            print("ƒê√£ h·ªßy l·ªãch ƒë·∫øm ng∆∞·ª£c.")

        self.cancel_all_task_alarms()

        print("D·ª´ng ·ª©ng d·ª•ng.")
        self.root.destroy()

    def get_recent_activity_logs(self, timeframe_days):
        """
        ƒê·ªçc log ho·∫°t ƒë·ªông t·ª´ file JSON v√† l·ªçc c√°c b·∫£n ghi trong kho·∫£ng th·ªùi gian 'timeframe_days' g·∫ßn nh·∫•t.
        Tr·∫£ v·ªÅ danh s√°ch c√°c b·∫£n ghi log (dictionary).
        """
        log_path = resource_path(ACTIVITY_LOG_FILE)
        recent_logs = []
        now = datetime.datetime.now()
        # T√≠nh th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·∫ßn l·ªçc
        start_time = now - datetime.timedelta(days=timeframe_days)

        if os.path.exists(log_path):
            try:
                with open(log_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if content:
                        log_data = json.loads(content)
                    else:
                        log_data = [] # File r·ªóng

                # L·ªçc c√°c b·∫£n ghi theo th·ªùi gian
                for entry in log_data:
                    try:
                        # Chuy·ªÉn chu·ªói timestamp trong log th√†nh ƒë·ªëi t∆∞·ª£ng datetime
                        entry_time = datetime.datetime.strptime(entry.get("timestamp"), "%Y-%m-%d %H:%M:%S")
                        # Ki·ªÉm tra xem b·∫£n ghi c√≥ n·∫±m trong kho·∫£ng th·ªùi gian g·∫ßn nh·∫•t kh√¥ng
                        if entry_time >= start_time and entry_time <= now:
                            recent_logs.append(entry)
                    except (ValueError, TypeError):
                        # B·ªè qua c√°c b·∫£n ghi c√≥ ƒë·ªãnh d·∫°ng timestamp l·ªói ho·∫∑c thi·∫øu
                        print(f"C·∫£nh b√°o: B·ªè qua b·∫£n ghi log c√≥ ƒë·ªãnh d·∫°ng th·ªùi gian l·ªói: {entry.get('timestamp')}")
                        continue

            except json.JSONDecodeError as e:
                print(f"L·ªói gi·∫£i m√£ JSON file log ho·∫°t ƒë·ªông {log_path} khi ƒë·ªçc d·ªØ li·ªáu g·∫ßn ƒë√¢y: {e}")
                # messagebox.showwarning("L·ªói ƒê·ªçc Log", f"Kh√¥ng th·ªÉ ƒë·ªçc file log ho·∫°t ƒë·ªông ƒë·ªÉ ph√¢n t√≠ch:\n{e}", parent=self.root)
                return [] # Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu c√≥ l·ªói ƒë·ªçc

            except Exception as e:
                print(f"L·ªói khi ƒë·ªçc file log ho·∫°t ƒë·ªông {log_path} d·ªØ li·ªáu g·∫ßn ƒë√¢y:\n{e}")
                # messagebox.showwarning("L·ªói ƒê·ªçc Log", f"L·ªói khi ƒë·ªçc file log ho·∫°t ƒë·ªông ƒë·ªÉ ph√¢n t√≠ch:\n{e}", parent=self.root)
                return [] # Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu c√≥ l·ªói ƒë·ªçc

        # S·∫Øp x·∫øp c√°c b·∫£n ghi theo th·ªùi gian (t·ª´ c≈© ƒë·∫øn m·ªõi) n·∫øu c·∫ßn thi·∫øt cho ph√¢n t√≠ch xu h∆∞·ªõng,
        # nh∆∞ng cho vi·ªác t√≠nh % th√¨ kh√¥ng b·∫Øt bu·ªôc. Gi·ªØ nguy√™n th·ª© t·ª± ƒë·ªçc t·ª´ file.
        # recent_logs.sort(key=lambda x: datetime.datetime.strptime(x.get("timestamp"), "%Y-%m-%d %H:%M:%S"))

        return recent_logs

    def calculate_behavior_emotion_percentages(self, logs):
        """
        T√≠nh t·ª∑ l·ªá ph·∫ßn trƒÉm c√°c label C·∫£m x√∫c (T√≠ch c·ª±c/Ti√™u c·ª±c/Trung t√≠nh)
        v√† Ph√¢n lo·∫°i H√†nh vi (C√≥ √≠ch/Kh√¥ng c√≥ √≠ch) trong danh s√°ch log ƒë√£ cho.
        Tr·∫£ v·ªÅ dictionary ch·ª©a c√°c t·ª∑ l·ªá.
        """
        total_logs = len(logs)
        if total_logs == 0:
            return {
                'total_logs': 0,
                'positive_emotion_pct': 0,
                'negative_emotion_pct': 0,
                'neutral_emotion_pct': 0, # V·∫´n gi·ªØ cho C·∫£m x√∫c
                'productive_behavior_pct': 0,
                'unproductive_behavior_pct': 0,
                # 'other_behavior_pct': 0, # B·ªè ph·∫ßn n√†y
            }

        # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa t·ª´ng lo·∫°i label
        positive_emotion_count = 0
        negative_emotion_count = 0
        neutral_emotion_count = 0

        productive_behavior_count = 0
        unproductive_behavior_count = 0
        # other_behavior_count = 0 # B·ªè ph·∫ßn n√†y

        for entry in logs:
            emotion = entry.get("emotion")
            category = entry.get("category")

            if emotion in POSITIVE_EMOTIONS:
                positive_emotion_count += 1
            elif emotion in NEGATIVE_EMOTIONS:
                negative_emotion_count += 1
            elif emotion == "B√¨nh th∆∞·ªùng":
                 neutral_emotion_count += 1

            if category in PRODUCTIVE_BEHAVIORS:
                productive_behavior_count += 1
            elif category in UNPRODUCTIVE_BEHAVIORS:
                unproductive_behavior_count += 1
            # --- B·ªè ph·∫ßn ki·ªÉm tra category kh√¥ng thu·ªôc 2 nh√≥m tr√™n ---
            # else:
            #      other_behavior_count += 1
            # -------------------------------------------------------


        # T√≠nh ph·∫ßn trƒÉm
        positive_emotion_pct = (positive_emotion_count / total_logs) * 100
        negative_emotion_pct = (negative_emotion_count / total_logs) * 100
        neutral_emotion_pct = (neutral_emotion_count / total_logs) * 100

        productive_behavior_pct = (productive_behavior_count / total_logs) * 100
        unproductive_behavior_pct = (unproductive_behavior_count / total_logs) * 100
        # other_behavior_pct = (other_behavior_count / total_logs) * 100 # B·ªè ph·∫ßn n√†y


        return {
            'total_logs': total_logs,
            'positive_emotion_pct': round(positive_emotion_pct, 1),
            'negative_emotion_pct': round(negative_emotion_pct, 1),
            'neutral_emotion_pct': round(neutral_emotion_pct, 1),
            'productive_behavior_pct': round(productive_behavior_pct, 1),
            'unproductive_behavior_pct': round(unproductive_behavior_pct, 1),
            # 'other_behavior_pct': round(other_behavior_pct, 1), # B·ªè ph·∫ßn n√†y
        }

# Ph∆∞∆°ng th·ª©c get_performance_indicators v√† ask_question s·∫Ω s·ª≠ d·ª•ng k·∫øt qu·∫£ t·ª´ h√†m n√†y
# n√™n ch√∫ng kh√¥ng c·∫ßn s·ª≠a ƒë·ªïi v·ªÅ m·∫∑t logic t√≠nh to√°n percentage, ch·ªâ c·∫ßn ƒë·∫£m b·∫£o
# ch√∫ng s·ª≠ d·ª•ng c√°c kh√≥a percentage ƒë√∫ng (positive_emotion_pct, negative_emotion_pct,
# productive_behavior_pct, unproductive_behavior_pct).
# Logic t√≠nh overall_negative/positive trong get_performance_indicators ƒë√£ d√πng ƒë√∫ng c√°c kh√≥a n√†y.
    
    def get_performance_indicators(self):
        """
        Th·ª±c hi·ªán ph√¢n t√≠ch log ho·∫°t ƒë·ªông theo c√°c quy t·∫Øc v√† x√°c ƒë·ªãnh c√°c indicator.
        Tr·∫£ v·ªÅ dictionary ch·ª©a k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã.
        """
        # L·∫•y log ho·∫°t ƒë·ªông cho 3 khung th·ªùi gian
        logs_1day = self.get_recent_activity_logs(1)
        logs_3days = self.get_recent_activity_logs(3)
        logs_7days = self.get_recent_activity_logs(7) # D√πng cho quy t·∫Øc 1 tr√™n tu·∫ßn (n·∫øu c·∫ßn)

        # T√≠nh ph·∫ßn trƒÉm cho t·ª´ng khung th·ªùi gian
        pct_1day = self.calculate_behavior_emotion_percentages(logs_1day)
        pct_3days = self.calculate_behavior_emotion_percentages(logs_3days)
        pct_7days = self.calculate_behavior_emotion_percentages(logs_7days)


        # --- √Åp d·ª•ng Quy t·∫Øc 1: Icon c·∫£nh b√°o/khen ng·ª£i chung (v√≠ d·ª• d·ª±a tr√™n 1 ng√†y g·∫ßn nh·∫•t) ---
        # B·∫°n mu·ªën d·ª±a tr√™n C·∫£m x√∫c hay H√†nh vi hay c·∫£ hai?
        # D·ª±a tr√™n m√¥ t·∫£, c√≥ v·∫ª quy t·∫Øc 1 l√† v·ªÅ T·ªîNG TH·ªÇ tr·∫°ng th√°i v√† h√†nh vi g·∫ßn ƒë√¢y.
        # H√£y k·∫øt h·ª£p c·∫£m x√∫c ti√™u c·ª±c v√† h√†nh vi kh√¥ng c√≥ √≠ch l√†m "ti√™u c·ª±c t·ªïng th·ªÉ".
        # K·∫øt h·ª£p c·∫£m x√∫c t√≠ch c·ª±c v√† h√†nh vi c√≥ √≠ch l√†m "t√≠ch c·ª±c t·ªïng th·ªÉ".

        # T·ª∑ l·ªá ti√™u c·ª±c/t√≠ch c·ª±c t·ªïng th·ªÉ trong 1 ng√†y
        overall_negative_1day = pct_1day['negative_emotion_pct'] + pct_1day['unproductive_behavior_pct']
        overall_positive_1day = pct_1day['positive_emotion_pct'] + pct_1day['productive_behavior_pct']

        main_status_icon = "" # Icon ch√≠nh
        main_status_message = "" # Th√¥ng b√°o ch√≠nh

        # ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng v√† logic d·ª±a tr√™n √Ω mu·ªën c·ª• th·ªÉ c·ªßa b·∫°n
        # V√≠ d·ª•: Ch·ªâ c·∫ßn 1 trong 2 nh√≥m (c·∫£m x√∫c ti√™u c·ª±c HO·∫∂C h√†nh vi kh√¥ng √≠ch) v∆∞·ª£t 50% l√† c·∫£nh b√°o?
        # Ho·∫∑c t·ªïng c·∫£ hai v∆∞·ª£t 50%?
        # Gi·∫£ ƒë·ªãnh: N·∫øu T·ªîNG C·∫¢M X√öC TI√äU C·ª∞C V√Ä H√ÄNH VI KH√îNG √çCH trong 1 ng√†y > 50% => C·∫£nh b√°o ƒë·ªè
        # Gi·∫£ ƒë·ªãnh: N·∫øu T·ªîNG C·∫¢M X√öC T√çCH C·ª∞C V√Ä H√ÄNH VI C√ì √çCH trong 1 ng√†y > 50% => Khen ng·ª£i xanh
        # N·∫øu c·∫£ hai kh√¥ng ƒë·∫°t ng∆∞·ª°ng, c√≥ th·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i trung t√≠nh ho·∫∑c th√¥ng tin chi ti·∫øt h∆°n.

        # C·∫£nh b√°o ƒë·ªè n·∫øu t·ªïng ti√™u c·ª±c + kh√¥ng √≠ch > 50% trong 1 ng√†y (ho·∫∑c ng∆∞·ª°ng kh√°c)
        # B·∫°n c√≥ th·ªÉ mu·ªën ng∆∞·ª°ng cao h∆°n, v√≠ d·ª• 60% ho·∫∑c 70% ƒë·ªÉ c·∫£nh b√°o th·∫≠t s·ª± nghi√™m tr·ªçng.
        # H√£y d√πng ng∆∞·ª°ng 50% nh∆∞ b·∫°n n√≥i.
        if overall_negative_1day > 50:
             main_status_icon = "üî¥" # Icon ƒë·ªè
             main_status_message = "C·∫ßn ch√∫ √Ω: Xu h∆∞·ªõng ti√™u c·ª±c/kh√¥ng hi·ªáu qu·∫£ g·∫ßn ƒë√¢y."
        # Khen ng·ª£i xanh n·∫øu t·ªïng t√≠ch c·ª±c + c√≥ √≠ch > 50% trong 1 ng√†y (ho·∫∑c ng∆∞·ª°ng kh√°c)
        elif overall_positive_1day > 50:
             main_status_icon = "üü¢" # Icon xanh l√°
             main_status_message = "Tuy·ªát v·ªùi! Xu h∆∞·ªõng t√≠ch c·ª±c/hi·ªáu qu·∫£ g·∫ßn ƒë√¢y."
        else:
             main_status_icon = "‚ö™" # Icon tr·∫Øng/x√°m (trung t√≠nh)
             main_status_message = "Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y ·ªü m·ª©c c√¢n b·∫±ng."

        # C√≥ th·ªÉ th√™m chi ti·∫øt % v√†o message n·∫øu mu·ªën
        # main_status_message += f" (Ti√™u c·ª±c/Kh√¥ng √≠ch: {overall_negative_1day:.1f}%, T√≠ch c·ª±c/C√≥ √≠ch: {overall_positive_1day:.1f}%)"


        # --- √Åp d·ª•ng Quy t·∫Øc 2: Icon xu h∆∞·ªõng (l√™n/xu·ªëng) ---
        # So s√°nh % ti√™u c·ª±c c·ªßa 1 ng√†y so v·ªõi 3 ng√†y
        # So s√°nh % t√≠ch c·ª±c c·ªßa 1 ng√†y so v·ªõi 3 ng√†y
        # C√≥ nhi·ªÅu c√°ch ƒë·ªãnh nghƒ©a "xu h∆∞·ªõng ƒëi l√™n/ƒëi xu·ªëng".
        # V√≠ d·ª•:
        # - Xu h∆∞·ªõng ti√™u c·ª±c ƒëi l√™n: % ti√™u c·ª±c h√¥m nay > % ti√™u c·ª±c 3 ng√†y
        # - Xu h∆∞·ªõng t√≠ch c·ª±c ƒëi l√™n: % t√≠ch c·ª±c h√¥m nay > % t√≠ch c·ª±c 3 ng√†y
        # L√†m th·∫ø n√†o ƒë·ªÉ k·∫øt h·ª£p c·∫£ hai?
        # M·ªôt c√°ch l√† so s√°nh "ƒëi·ªÉm s·ªë" ti√™u c·ª±c/t√≠ch c·ª±c t·ªïng th·ªÉ gi·ªØa 1 ng√†y v√† 3 ng√†y.
        # V√≠ d·ª•: (T√≠ch c·ª±c - Ti√™u c·ª±c) c·ªßa 1 ng√†y so v·ªõi (T√≠ch c·ª±c - Ti√™u c·ª±c) c·ªßa 3 ng√†y.
        # N·∫øu (Pos_1d - Neg_1d) > (Pos_3d - Neg_3d) => ƒêi·ªÉm s·ªë ƒëang tƒÉng => Xu h∆∞·ªõng ƒëi l√™n (m≈©i t√™n xanh)
        # N·∫øu (Pos_1d - Neg_1d) < (Pos_3d - Neg_3d) => ƒêi·ªÉm s·ªë ƒëang gi·∫£m => Xu h∆∞·ªõng ƒëi xu·ªëng (m≈©i t√™n ƒë·ªè)

        # T√≠nh ƒëi·ªÉm s·ªë (T√≠ch c·ª±c - Ti√™u c·ª±c)
        score_1day = pct_1day['positive_emotion_pct'] + pct_1day['productive_behavior_pct'] - (pct_1day['negative_emotion_pct'] + pct_1day['unproductive_behavior_pct'])
        score_3days = pct_3days['positive_emotion_pct'] + pct_3days['productive_behavior_pct'] - (pct_3days['negative_emotion_pct'] + pct_3days['unproductive_behavior_pct'])


        trend_icon = "‚ö™" # Icon xu h∆∞·ªõng m·∫∑c ƒë·ªãnh (trung t√≠nh)
        # Ch·ªâ x√°c ƒë·ªãnh xu h∆∞·ªõng n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu (√≠t nh·∫•t 2 ƒëi·ªÉm d·ªØ li·ªáu: h√¥m nay v√† trong 3 ng√†y)
        # v√† c√≥ s·ª± thay ƒë·ªïi ƒë√°ng k·ªÉ (tr√°nh nhi·ªÖu nh·ªè)
        # V√≠ d·ª•: N·∫øu c√≥ √≠t nh·∫•t 5 b·∫£n ghi trong 3 ng√†y v√† √≠t nh·∫•t 2 b·∫£n ghi trong 1 ng√†y
        # v√† s·ª± ch√™nh l·ªách ƒëi·ªÉm s·ªë ƒë·ªß l·ªõn (v√≠ d·ª• > 5 ho·∫∑c 10 ƒëi·ªÉm %)

        # ƒê·∫£m b·∫£o c√≥ ƒë·ªß d·ªØ li·ªáu trong c·∫£ 1 ng√†y v√† 3 ng√†y ƒë·ªÉ so s√°nh
        if pct_1day['total_logs'] >= 2 and pct_3days['total_logs'] >= 5: # Ng∆∞·ª°ng d·ªØ li·ªáu t·ªëi thi·ªÉu

            # So s√°nh ƒëi·ªÉm s·ªë ƒë·ªÉ x√°c ƒë·ªãnh xu h∆∞·ªõng
            if score_1day > score_3days:
                 # Xu h∆∞·ªõng t·ªët h∆°n (ƒëi l√™n)
                 trend_icon = "‚¨ÜÔ∏è" # M≈©i t√™n xanh l√° (c√≥ th·ªÉ ƒë·ªïi th√†nh m≈©i t√™n m√†u xanh)
                 # C√≥ th·ªÉ th√™m m·ªôt th√¥ng b√°o xu h∆∞·ªõng c·ª• th·ªÉ n·∫øu c·∫ßn
            elif score_1day < score_3days:
                 # Xu h∆∞·ªõng x·∫•u ƒëi (ƒëi xu·ªëng)
                 trend_icon = "‚¨áÔ∏è" # M≈©i t√™n ƒë·ªè (c√≥ th·ªÉ ƒë·ªïi th√†nh m≈©i t√™n m√†u ƒë·ªè)
                 # C√≥ th·ªÉ th√™m m·ªôt th√¥ng b√°o xu h∆∞·ªõng c·ª• th·ªÉ n·∫øu c·∫ßn
            else:
                 # ƒêi·ªÉm s·ªë b·∫±ng nhau ho·∫∑c kh√¥ng thay ƒë·ªïi ƒë√°ng k·ªÉ
                 trend_icon = "‚û°Ô∏è" # M≈©i t√™n ngang (·ªïn ƒë·ªãnh)


        # --- K·∫øt qu·∫£ cu·ªëi c√πng ƒë·ªÉ hi·ªÉn th·ªã ---
        return {
            'main_status_icon': main_status_icon,
            'main_status_message': main_status_message,
            'trend_icon': trend_icon,
            # C√≥ th·ªÉ tr·∫£ v·ªÅ th√™m c√°c chi ti·∫øt % n·∫øu mu·ªën hi·ªÉn th·ªã chi ti·∫øt h∆°n tr√™n popup
            # 'pct_1day': pct_1day,
            # 'pct_3days': pct_3days,
        }

if __name__ == "__main__":
    root = tk.Tk()
    app = ReminderApp(root)
    root.protocol("WM_DELETE_WINDOW", app.stop_program)
    root.mainloop()