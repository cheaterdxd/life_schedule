# -*- coding: utf-8 -*-
"""
V√≠ d·ª• v·ªÅ Thanh c√¥ng c·ª• c√≥ th·ªÉ Thu g·ªçn/M·ªü r·ªông v·ªõi c√°c n√∫t tr√≤n.
S·ª≠ d·ª•ng PySide6, QPropertyAnimation v√† Qt Style Sheets.
"""
import sys
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QPushButton, QHBoxLayout, QVBoxLayout,
    QLabel, QFrame
)
from PySide6.QtCore import Qt, QSize, QPropertyAnimation, QEasingCurve
from PySide6.QtGui import QIcon, QFont

# --- H·∫±ng s·ªë ƒë·ªÉ d·ªÖ d√†ng t√πy ch·ªânh ---
BUTTON_SIZE = 40  # K√≠ch th∆∞·ªõc (chi·ªÅu r·ªông v√† cao) c·ªßa n√∫t tr√≤n
SPACING = 10      # Kho·∫£ng c√°ch gi·ªØa c√°c n√∫t
ANIMATION_DURATION = 300 # Th·ªùi gian hi·ªáu ·ª©ng (miligi√¢y)

# --- B·∫£ng ki·ªÉu d√°ng (Stylesheet) cho giao di·ªán ---
TOOLBAR_STYLESHEET = f"""
    /* --- Container ch√≠nh c·ªßa toolbar --- */
    #ToolbarContainer {{
        background-color: #2c3e50;
        border-radius: {BUTTON_SIZE / 2}px;
    }}

    /* --- Ki·ªÉu d√°ng chung cho n√∫t tr√≤n --- */
    QPushButton#CircularButton {{
        background-color: #34495e;
        color: white;
        border: none;
        font-size: 16px;
        font-weight: bold;
        border-radius: {BUTTON_SIZE / 2}px; /* ƒê√¢y l√† ch√¨a kh√≥a ƒë·ªÉ t·∫°o n√∫t tr√≤n */
    }}
    QPushButton#CircularButton:hover {{
        background-color: #4a627a;
    }}
    QPushButton#CircularButton:pressed {{
        background-color: #2a3a4a;
    }}

    /* --- Ki·ªÉu d√°ng ri√™ng cho n√∫t Toggle ch√≠nh --- */
    QPushButton#ToggleButton {{
        background-color: #e67e22; /* M√†u cam */
    }}
    QPushButton#ToggleButton:hover {{
        background-color: #f39c12;
    }}
"""

class CollapsibleToolbar(QWidget):
    """
    M·ªôt widget toolbar t√πy ch·ªânh ch·ª©a c√°c n√∫t tr√≤n
    v√† c√≥ th·ªÉ thu g·ªçn/m·ªü r·ªông v·ªõi hi·ªáu ·ª©ng animation.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.is_expanded = False # Tr·∫°ng th√°i ban ƒë·∫ßu l√† thu g·ªçn

        # Thi·∫øt l·∫≠p layout ch√≠nh cho to√†n b·ªô toolbar
        self.main_layout = QHBoxLayout(self)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        self.setObjectName("ToolbarContainer") # ƒê·∫∑t t√™n ƒë·ªÉ √°p d·ª•ng style

        # T·∫°o container cho c√°c n√∫t ch·ª©c nƒÉng (ph·∫ßn s·∫Ω ƒë∆∞·ª£c thu/m·ªü)
        self.buttons_container = QWidget()
        self.buttons_layout = QHBoxLayout(self.buttons_container)
        self.buttons_layout.setContentsMargins(SPACING, 0, 0, 0)
        self.buttons_layout.setSpacing(SPACING)

        # Danh s√°ch c√°c icon v√† tooltip cho c√°c n√∫t ch·ª©c nƒÉng
        button_definitions = [
            ("‚öôÔ∏è", "C√†i ƒë·∫∑t"),
            ("üìÅ", "M·ªü File"),
            ("üìä", "Th·ªëng k√™"),
            ("üîî", "Th√¥ng b√°o")
        ]

        # T·∫°o v√† th√™m c√°c n√∫t ch·ª©c nƒÉng v√†o layout c·ªßa container
        for icon, tooltip in button_definitions:
            button = self.create_circular_button(icon, tooltip)
            self.buttons_layout.addWidget(button)

        # T√≠nh to√°n chi·ªÅu r·ªông t·ªëi ƒëa khi m·ªü r·ªông
        self.expanded_width = (BUTTON_SIZE * len(button_definitions)) + (SPACING * (len(button_definitions) + 1))
        
        # ƒê·∫∑t chi·ªÅu r·ªông ban ƒë·∫ßu c·ªßa container l√† 0 ƒë·ªÉ n√≥ b·ªã ·∫©n
        self.buttons_container.setFixedWidth(0)

        # T·∫°o n√∫t ch√≠nh ƒë·ªÉ ƒëi·ªÅu khi·ªÉn vi·ªác thu/m·ªü
        self.toggle_button = self.create_circular_button("‚ò∞", "M·ªü r·ªông")
        self.toggle_button.setObjectName("ToggleButton") # ƒê·∫∑t t√™n ri√™ng ƒë·ªÉ c√≥ style kh√°c
        self.toggle_button.clicked.connect(self.toggle_animation)
        
        # Th√™m c√°c th√†nh ph·∫ßn v√†o layout ch√≠nh
        # ƒê·∫∑t n√∫t toggle b√™n tr√°i, c√°c n√∫t ch·ª©c nƒÉng b√™n ph·∫£i
        self.main_layout.addWidget(self.toggle_button)
        self.main_layout.addWidget(self.buttons_container)

    def create_circular_button(self, text, tooltip=""):
        """H√†m tr·ª£ gi√∫p ƒë·ªÉ t·∫°o m·ªôt n√∫t tr√≤n nh·∫•t qu√°n."""
        button = QPushButton(text, self)
        button.setFixedSize(BUTTON_SIZE, BUTTON_SIZE)
        button.setObjectName("CircularButton") # √Åp d·ª•ng style chung
        button.setToolTip(tooltip)
        # K·∫øt n·ªëi s·ª± ki·ªán click c·ªßa n√∫t n√†y t·ªõi m·ªôt h√†m x·ª≠ l√Ω (t√πy ch·ªçn)
        button.clicked.connect(lambda: print(f"B·∫°n ƒë√£ nh·∫•p v√†o n√∫t: '{tooltip}'"))
        return button

    def toggle_animation(self):
        """K√≠ch ho·∫°t hi·ªáu ·ª©ng animation ƒë·ªÉ m·ªü r·ªông ho·∫∑c thu g·ªçn toolbar."""
        # X√°c ƒë·ªãnh chi·ªÅu r·ªông b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i
        start_width = self.buttons_container.width()
        end_width = self.expanded_width if not self.is_expanded else 0
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† icon c·ªßa n√∫t toggle
        if not self.is_expanded:
            self.toggle_button.setText("‚ü®") # M≈©i t√™n ch·ªâ sang tr√°i
            self.toggle_button.setToolTip("Thu g·ªçn")
        else:
            self.toggle_button.setText("‚ò∞") # Bi·ªÉu t∆∞·ª£ng menu
            self.toggle_button.setToolTip("M·ªü r·ªông")
            
        # T·∫°o v√† c·∫•u h√¨nh animation
        self.animation = QPropertyAnimation(self.buttons_container, b"maximumWidth")
        self.animation.setDuration(ANIMATION_DURATION)
        self.animation.setStartValue(start_width)
        self.animation.setEndValue(end_width)
        self.animation.setEasingCurve(QEasingCurve.InOutCubic) # Hi·ªáu ·ª©ng m∆∞·ª£t m√†
        
        # B·∫Øt ƒë·∫ßu animation
        self.animation.start()
        
        # ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i
        self.is_expanded = not self.is_expanded

class MainWindow(QMainWindow):
    """C·ª≠a s·ªï ch√≠nh ƒë·ªÉ ch·ª©a v√† hi·ªÉn th·ªã toolbar."""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Collapsible Circular Toolbar Demo")
        self.setGeometry(300, 300, 600, 400)

        # T·∫°o widget trung t√¢m v√† layout
        main_widget = QWidget()
        layout = QVBoxLayout(main_widget)
        self.setCentralWidget(main_widget)

        # Th√™m m·ªôt nh√£n h∆∞·ªõng d·∫´n
        info_label = QLabel("Nh·∫•p v√†o n√∫t m√†u cam ƒë·ªÉ m·ªü r·ªông ho·∫∑c thu g·ªçn thanh c√¥ng c·ª•.")
        info_label.setAlignment(Qt.AlignCenter)
        info_label.setFont(QFont("Segoe UI", 14))

        # T·∫°o v√† th√™m toolbar v√†o layout
        self.toolbar = CollapsibleToolbar()
        
        # S·ª≠ d·ª•ng m·ªôt layout ph·ª• ƒë·ªÉ cƒÉn ch·ªânh toolbar
        toolbar_layout = QHBoxLayout()
        toolbar_layout.addWidget(self.toolbar)
        toolbar_layout.addStretch() # ƒê·∫©y toolbar v·ªÅ ph√≠a b√™n tr√°i

        layout.addLayout(toolbar_layout)
        layout.addWidget(info_label)
        layout.addStretch()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyleSheet(TOOLBAR_STYLESHEET) # √Åp d·ª•ng stylesheet cho to√†n b·ªô ·ª©ng d·ª•ng
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
