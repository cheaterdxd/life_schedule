# -*- coding: utf-8 -*-
"""
FocusToolbar 3.5 - Phi√™n b·∫£n M√®o Ch√†o thay th·∫ø Toggle Button.
- N√∫t ƒëi·ªÅu khi·ªÉn gi·ªù l√† m·ªôt ·∫£nh GIF c√≥ th·ªÉ nh·∫•p v√†o.
- ƒê√£ d·ªçn d·∫πp v√† s·ª≠a l·ªói c√∫ ph√°p trong file g·ªëc.
"""
import sys
from PySide6.QtWidgets import (
    QApplication,
    QWidget,
    QPushButton,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QMenu,
    QComboBox,
    QInputDialog,
    QMessageBox,
    QFrame,
)

# === THAY ƒê·ªîI 1: Import th√™m c√°c l·ªõp c·∫ßn thi·∫øt cho ·∫£nh ƒë·ªông ===
from PySide6.QtCore import (
    Qt,
    QTimer,
    QPropertyAnimation,
    QEasingCurve,
    QCoreApplication,
    Signal,
    QSize,
)
from PySide6.QtGui import QAction, QFont, QMouseEvent, QMovie
import qdarktheme
import os

# --- C·∫•u h√¨nh (kh√¥ng ƒë·ªïi) ---
WORK_MINUTES, SHORT_BREAK_MINUTES, LONG_BREAK_MINUTES = 25, 5, 20
ANIMATION_DURATION = 800
BUTTON_SIZE = 60
WORKING_DIR = os.path.dirname(os.path.abspath(__file__))
GIF_PATH = os.path.join(WORKING_DIR, "waving_cat.gif")
# --- Stylesheet t√πy ch·ªânh (ƒë√£ s·ª≠a l·ªói c√∫ ph√°p) ---
CUSTOM_STYLESHEET = """
/* Quy t·∫Øc n√†y s·∫Ω ghi ƒë√® l√™n qdarktheme ƒë·ªÉ l√†m n·ªÅn trong su·ªët */
#MainContainer {
    background-color: transparent;
}
/* Quy t·∫Øc n√†y ƒë·∫£m b·∫£o n√∫t/label ƒëi·ªÅu khi·ªÉn lu√¥n tr√≤n v√† c√≥ m√†u cam */
#ToggleButton {
    background-color: #e67e22;
    border-radius: 20px;
    border: 1px solid #d35400; /* Th√™m vi·ªÅn nh·∫π cho ƒë·∫πp h∆°n */
}
#ToggleButton:hover {
    background-color: #f39c12;
}
/* Quy t·∫Øc n√†y ƒë·∫£m b·∫£o h·ªôp n·ªôi dung c√≥ m√†u n·ªÅn v√† bo g√≥c nh∆∞ thi·∫øt k·∫ø */
#CollapsibleContainer {
    /*background-color: #34495e;*/ /* M√†u n·ªÅn c·ªßa h·ªôp n·ªôi dung */
    border-radius: 15px;
}
"""


class ClickableLabel(QLabel):
    """
    M·ªôt l·ªõp con c·ªßa QLabel ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ c√≥ th·ªÉ nh·∫•p chu·ªôt.
    N√≥ ph√°t ra m·ªôt t√≠n hi·ªáu 'clicked' m·ªói khi ƒë∆∞·ª£c nh·∫•n.
    """

    clicked = Signal()  # ƒê·ªãnh nghƒ©a m·ªôt t√≠n hi·ªáu m·ªõi t√™n l√† 'clicked'

    def __init__(self, parent=None):
        super().__init__(parent)

    def mousePressEvent(self, event: QMouseEvent):
        """H√†m n√†y ƒë∆∞·ª£c t·ª± ƒë·ªông g·ªçi khi ng∆∞·ªùi d√πng nh·∫•p chu·ªôt v√†o label."""
        if event.button() == Qt.MouseButton.LeftButton:
            self.clicked.emit()  # Ph√°t ra t√≠n hi·ªáu 'clicked'
        super().mousePressEvent(event)


class PomodoroWidgetCompact(QWidget):
    # L·ªõp n√†y kh√¥ng c√≥ thay ƒë·ªïi
    def __init__(self, parent=None):
        super().__init__(parent)
        self.state = "idle"
        self.work_cycles = 0
        self.total_seconds = WORK_MINUTES * 60
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_display)

        layout = QHBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)

        self.time_label = QLabel(f"{WORK_MINUTES:02}:00")
        self.time_label.setObjectName("TimeLabel")
        self.time_label.setFont(QFont("Segoe UI", 26, QFont.Weight.Bold))
        layout.addWidget(self.time_label)

        self.start_button = QPushButton("‚ñ∂")
        self.pause_button = QPushButton("‚ùö‚ùö")
        self.reset_button = QPushButton("‚Ü∫")
        self.start_button.setFont(QFont("Segoe UI Symbol", 16))
        self.pause_button.setFont(QFont("Segoe UI Symbol", 16))
        self.reset_button.setFont(QFont("Segoe UI Symbol", 14))
        for btn in (self.start_button, self.pause_button, self.reset_button):
            btn.setFixedSize(28, 28)
            layout.addWidget(btn)

        self.start_button.clicked.connect(self.start_timer)
        self.pause_button.clicked.connect(self.pause_timer)
        self.reset_button.clicked.connect(self.reset_timer)

    def start_timer(self):
        if not self.timer.isActive():
            if self.state == "idle":
                self.state = "work"
                self.total_seconds = WORK_MINUTES * 60
            self.timer.start(1000)

    def pause_timer(self):
        self.timer.stop()

    def reset_timer(self):
        self.timer.stop()
        self.state = "idle"
        self.work_cycles = 0
        self.total_seconds = WORK_MINUTES * 60
        self._update_label_text()

    def update_display(self):
        self.total_seconds -= 1
        self._update_label_text()
        if self.total_seconds < 0:
            self.timer.stop()
            self._next_cycle()

    def _update_label_text(self):
        mins, secs = divmod(self.total_seconds, 60)
        self.time_label.setText(f"{mins:02}:{secs:02}")

    def _next_cycle(self):
        if self.state == "work":
            self.work_cycles += 1
            if self.work_cycles % 4 == 0:
                self.state = "long_break"
                self.total_seconds = LONG_BREAK_MINUTES * 60
            else:
                self.state = "short_break"
                self.total_seconds = SHORT_BREAK_MINUTES * 60
        else:
            self.state = "work"
            self.total_seconds = WORK_MINUTES * 60
        self._update_label_text()
        self.start_timer()


class TaskWidgetCompact(QWidget):
    # L·ªõp n√†y kh√¥ng c√≥ thay ƒë·ªïi
    def __init__(self, parent=None):
        super().__init__(parent)
        layout = QHBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        self.task_combo = QComboBox()
        self.task_combo.setMinimumWidth(120)
        layout.addWidget(self.task_combo)
        self.add_button = QPushButton("+")
        self.add_button.setFont(QFont("Segoe UI Symbol", 16))
        self.add_button.setFixedSize(28, 28)
        layout.addWidget(self.add_button)
        self.delete_button = QPushButton("‚àí")
        self.delete_button.setFont(QFont("Segoe UI Symbol", 16))
        self.delete_button.setFixedSize(28, 28)
        layout.addWidget(self.delete_button)
        self.add_button.clicked.connect(self.add_task)
        self.delete_button.clicked.connect(self.delete_task)

    def add_task(self):
        dialog = QInputDialog(self)
        dialog.setStyleSheet("QLineEdit { color: black; }")
        text, ok = dialog.getText(self, "Th√™m Nhi·ªám v·ª• m·ªõi", "T√™n nhi·ªám v·ª•:")
        if ok and text:
            self.task_combo.addItem(text)
            self.task_combo.setCurrentText(text)

    def delete_task(self):
        if self.task_combo.currentIndex() == -1:
            return
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n", f"X√≥a nhi·ªám v·ª• '{self.task_combo.currentText()}'?"
        )
        if reply == QMessageBox.StandardButton.Yes:
            self.task_combo.removeItem(self.task_combo.currentIndex())


class FocusToolbar(QWidget):
    """C·ª≠a s·ªï n·ªïi ch√≠nh, c√≥ th·ªÉ thu g·ªçn/m·ªü r·ªông."""

    def __init__(self):
        super().__init__()
        self.is_expanded, self.drag_position = False, None
        self.setWindowFlags(
            Qt.WindowType.FramelessWindowHint
            | Qt.WindowType.WindowStaysOnTopHint
            | Qt.WindowType.Tool
        )
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        self.setObjectName("FocusToolbar")
        self.main_container = QWidget()
        self.main_container.setObjectName("MainContainer")
        self.main_layout = QHBoxLayout(self.main_container)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(10)
        window_layout = QHBoxLayout(self)
        window_layout.setContentsMargins(0, 0, 0, 0)
        window_layout.addWidget(self.main_container)

        # === THAY ƒê·ªîI 2: Thay th·∫ø QPushButton b·∫±ng ClickableLabel ===
        # Thay v√¨ n√∫t b·∫•m, ch√∫ng ta t·∫°o m·ªôt label c√≥ th·ªÉ nh·∫•p chu·ªôt
        self.toggle_label = ClickableLabel(self)
        self.toggle_label.setObjectName(
            "ToggleButton"
        )  # Gi·ªØ l·∫°i t√™n ƒë·ªÉ √°p d·ª•ng style c≈©
        self.toggle_label.setFixedSize(BUTTON_SIZE + 40, BUTTON_SIZE)
        self.toggle_label.clicked.connect(self.toggle_animation)

        # T·∫°o QMovie ƒë·ªÉ hi·ªÉn th·ªã GIF

        self.movie = QMovie(GIF_PATH)  # ƒê·∫£m b·∫£o file n√†y t·ªìn t·∫°i
        if not self.movie.isValid():
            print("L·ªói: Kh√¥ng th·ªÉ t·∫£i file waving_cat.gif")
            self.toggle_label.setText("üéØ")  # Fallback v·ªÅ text n·∫øu kh√¥ng c√≥ GIF
        else:
            self.toggle_label.setMovie(self.movie)
            self.movie.setScaledSize(
                QSize(BUTTON_SIZE + 40, BUTTON_SIZE)
            )  # Co gi√£n GIF v·ª´a v·ªõi label
            self.movie.start()  # B·∫Øt ƒë·∫ßu ch·∫°y ·∫£nh ƒë·ªông

        # ... c√°c ph·∫ßn c√≤n l·∫°i c·ªßa __init__ kh√¥ng ƒë·ªïi ...
        self.collapsible_container = QWidget()
        self.collapsible_container.setObjectName("CollapsibleContainer")
        container_layout = QHBoxLayout(self.collapsible_container)
        container_layout.setContentsMargins(5, 0, 5, 0)
        container_layout.setSpacing(5)
        self.task_widget = TaskWidgetCompact()
        container_layout.addWidget(self.task_widget)
        line = QFrame()
        line.setFrameShape(QFrame.Shape.VLine)
        line.setFrameShadow(QFrame.Shadow.Plain)
        container_layout.addWidget(line)
        self.pomodoro_widget = PomodoroWidgetCompact()
        container_layout.addWidget(self.pomodoro_widget)
        self.expanded_width = self.collapsible_container.sizeHint().width() + 10
        self.collapsible_container.setMaximumWidth(0)

        # === THAY ƒê·ªîI 3: Th√™m label v√†o layout thay v√¨ n√∫t b·∫•m ===
        self.main_layout.addWidget(self.toggle_label)
        self.main_layout.addWidget(self.collapsible_container)
        self.main_layout.addStretch(1)

    def toggle_animation(self):
        # H√†m n√†y kh√¥ng c√≥ thay ƒë·ªïi, n√≥ v·∫´n ho·∫°t ƒë·ªông nh∆∞ c≈©
        content_end_width = self.expanded_width if not self.is_expanded else 0
        window_end_width = BUTTON_SIZE + 40 + content_end_width
        self.anim_content = QPropertyAnimation(
            self.collapsible_container, b"maximumWidth"
        )
        self.anim_content.setDuration(ANIMATION_DURATION)
        self.anim_content.setEndValue(content_end_width)
        self.anim_content.setEasingCurve(QEasingCurve.Type.InOutCubic)
        self.anim_window = QPropertyAnimation(self.main_container, b"minimumWidth")
        self.anim_window.setDuration(ANIMATION_DURATION)
        self.anim_window.setEndValue(window_end_width)
        self.anim_window.setEasingCurve(QEasingCurve.Type.InOutCubic)
        self.anim_content.start()
        self.anim_window.start()
        self.is_expanded = not self.is_expanded

    # --- C√°c h√†m x·ª≠ l√Ω k√©o-th·∫£ v√† menu (ƒë√£ d·ªçn d·∫πp) ---
    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.MouseButton.LeftButton:
            self.drag_position = (
                event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            )
            event.accept()

    def mouseMoveEvent(self, event: QMouseEvent):
        if (
            event.buttons() == Qt.MouseButton.LeftButton
            and self.drag_position is not None
        ):
            self.move(event.globalPosition().toPoint() - self.drag_position)
            event.accept()

    def mouseReleaseEvent(self, event):
        self.drag_position = None
        event.accept()

    def contextMenuEvent(self, event):
        menu = QMenu(self)
        quit_action = QAction("Tho√°t", self)
        quit_action.triggered.connect(QApplication.quit)
        menu.addAction(quit_action)
        menu.exec(event.globalPos())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    base_stylesheet = qdarktheme.load_stylesheet("light")
    combined_stylesheet = base_stylesheet + CUSTOM_STYLESHEET
    app.setStyleSheet(combined_stylesheet)
    toolbar = FocusToolbar()
    toolbar.show()
    sys.exit(app.exec())
