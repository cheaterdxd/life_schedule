# -*- coding: utf-8 -*-
import sys
from PySide6.QtWidgets import (
    QApplication, QWidget, QPushButton, QHBoxLayout, QMenu
)
from PySide6.QtCore import Qt, QPropertyAnimation, QEasingCurve
from PySide6.QtGui import QAction, QMouseEvent

# --- Constants and Stylesheet (unchanged) ---
BUTTON_SIZE = 40
SPACING = 10
ANIMATION_DURATION = 800
FLOATING_TOOLBAR_STYLESHEET = f""" 
    /* --- Container ch√≠nh c·ªßa toolbar --- */
    #FloatingToolbar {{
        /* background-color: rgba(44, 62, 80, 0.5);  M√†u t·ªëi, h∆°i trong su·ªët */
        border-radius: {BUTTON_SIZE / 2}px; /* ƒê·ªÉ t·∫°o h√¨nh tr√≤n */
    }}

    /* --- Ki·ªÉu d√°ng chung cho n√∫t tr√≤n --- */
    QPushButton.CircularButton {{
        background-color: #34495e ; /* M√†u x√°m ƒë·∫≠m */
        color: white;
        border: none;
        font-size: 16px;
        font-weight: bold;
        border-radius: {BUTTON_SIZE / 2}px;
    }}
    QPushButton.CircularButton:hover {{
        background-color: #4a627a; /* M√†u x√°m s√°ng h∆°n khi hover */
    }}
    
    /* --- Ki·ªÉu d√°ng ri√™ng cho n√∫t Toggle ch√≠nh --- */
    QPushButton#ToggleButton {{
        background-color: #e67e22; /* M√†u cam */
    }}
    QPushButton#ToggleButton:hover {{
        background-color: #f39c12; /* M√†u cam s√°ng h∆°n khi hover */
    }}
"""


class FloatingToolbar(QWidget):
    def __init__(self):
        super().__init__()
        self.is_expanded = False
        self.drag_position = None # This variable will store the drag offset.

        # --- Window setup (unchanged) ---
        self.setWindowFlags(
            Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool
        )
        self.setAttribute(Qt.WA_TranslucentBackground) # Make the background translucent
        self.setObjectName("FloatingToolbar") # Set an object name for styling
        self.setStyleSheet(FLOATING_TOOLBAR_STYLESHEET) # Apply the stylesheet to the toolbar
        
        # --- Layout and buttons (unchanged) ---
        self.main_layout = QHBoxLayout(self) # This is the main layout for the toolbar
        self.main_layout.setContentsMargins(0, 0, 0, 0); # Set margins to 0 for a clean look
        self.main_layout.setSpacing(0) # Set spacing to 0 to avoid gaps between buttons

        # Create a container for the buttons
        self.buttons_container = QWidget() # This will hold the circular buttons
        self.buttons_layout = QHBoxLayout(self.buttons_container) # This is the layout for the buttons
        self.buttons_layout.setContentsMargins(SPACING, 0, 0, 0); # Set left margin to SPACING for the first button
        self.buttons_layout.setSpacing(SPACING) # Set spacing between buttons to SPACING
        button_definitions = [("‚öôÔ∏è", "Settings"), ("üìÅ", "Open"), ("üìä", "Stats"), ("üîî", "Alerts")]
        for icon, tooltip in button_definitions:
            self.buttons_layout.addWidget(self.create_circular_button(icon, tooltip))
        self.expanded_width = (BUTTON_SIZE * len(button_definitions)) + (SPACING * (len(button_definitions) + 1))
        self.buttons_container.setFixedWidth(0) # Set initial width to 0 for animation effect
        self.toggle_button = self.create_circular_button("‚ò∞", "Expand") # This is the main toggle button
        self.toggle_button.setObjectName("ToggleButton") # Set an object name for styling
        self.toggle_button.clicked.connect(self.toggle_animation) # Connect the toggle button to the animation method 
        self.main_layout.addWidget(self.toggle_button) # Add the toggle button to the main layout
        self.main_layout.addWidget(self.buttons_container) # Add the buttons container to the main layout
        self.main_layout.addStretch(1)  # Add stretch to push the buttons to the left side
        self.setFixedSize(BUTTON_SIZE, BUTTON_SIZE)      # Set the fixed size of the toolbar to the size of the toggle button

    # --- Method to create circular buttons ---
    # This method creates a circular button with a given text and tooltip.
    def create_circular_button(self, text, tooltip):
        button = QPushButton(text)
        button.setFixedSize(BUTTON_SIZE, BUTTON_SIZE); button.setToolTip(tooltip)
        button.setProperty("class", "CircularButton")
        button.clicked.connect(lambda: print(f"Clicked: '{tooltip}'"))
        return button
        
    def toggle_animation(self):
        # --- B∆Ø·ªöC 1 & 2: X√°c ƒë·ªãnh tr·∫°ng th√°i v√† t√≠nh to√°n k√≠ch th∆∞·ªõc ƒë√≠ch ---
        
        # N·∫øu thanh c√¥ng c·ª• ƒëang thu g·ªçn (is_expanded l√† False), th√¨ k√≠ch th∆∞·ªõc ƒë√≠ch
        # s·∫Ω l√† chi·ªÅu r·ªông ƒë√£ t√≠nh to√°n tr∆∞·ªõc ƒë√≥ (self.expanded_width).
        # Ng∆∞·ª£c l·∫°i, n·∫øu ƒëang m·ªü r·ªông, k√≠ch th∆∞·ªõc ƒë√≠ch s·∫Ω l√† 0.
        end_width = self.expanded_width if not self.is_expanded else 0
        
        # T√≠nh to√°n chi·ªÅu r·ªông t·ªïng th·ªÉ c·ªßa to√†n b·ªô widget sau khi animation k·∫øt th√∫c.
        # B·∫±ng chi·ªÅu r·ªông c·ªßa n√∫t ƒëi·ªÅu khi·ªÉn (BUTTON_SIZE) c·ªông v·ªõi chi·ªÅu r·ªông c·ªßa c√°c n√∫t con.
        total_end_width = BUTTON_SIZE + end_width

        # C·∫≠p nh·∫≠t giao di·ªán c·ªßa n√∫t ƒëi·ªÅu khi·ªÉn ƒë·ªÉ cung c·∫•p ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng.
        if not self.is_expanded:
            self.toggle_button.setText("‚ü®") # ƒê·ªïi icon th√†nh m≈©i t√™n "thu g·ªçn"
            self.toggle_button.setToolTip("Thu g·ªçn")
        else:
            self.toggle_button.setText("‚ò∞") # ƒê·ªïi icon v·ªÅ d·∫°ng menu "m·ªü r·ªông"
            self.toggle_button.setToolTip("M·ªü r·ªông")

        # --- B∆Ø·ªöC 3: T·∫°o v√† c·∫•u h√¨nh hi·ªáu ·ª©ng (Animation) ---
        
        # Animation th·ª© nh·∫•t: ƒêi·ªÅu khi·ªÉn k√≠ch th∆∞·ªõc c·ªßa "h·ªôp ch·ª©a" c√°c n√∫t con.
        # N√≥ s·∫Ω thay ƒë·ªïi thu·ªôc t√≠nh 'maximumWidth' c·ªßa self.buttons_container.
        self.anim_container = QPropertyAnimation(self.buttons_container, b"maximumWidth")
        self.anim_container.setDuration(ANIMATION_DURATION) # Th·ªùi gian hi·ªáu ·ª©ng
        self.anim_container.setEndValue(end_width) # ƒê·∫∑t k√≠ch th∆∞·ªõc ƒë√≠ch
        self.anim_container.setEasingCurve(QEasingCurve.InOutCubic) # Ki·ªÉu hi·ªáu ·ª©ng m∆∞·ª£t m√†

        # Animation th·ª© hai: ƒêi·ªÅu khi·ªÉn k√≠ch th∆∞·ªõc c·ªßa to√†n b·ªô widget toolbar.
        # ƒêi·ªÅu n√†y c·∫ßn thi·∫øt ƒë·ªÉ widget cha co gi√£n theo c√°c n√∫t con.
        self.anim_widget = QPropertyAnimation(self, b"minimumWidth")
        self.anim_widget.setDuration(ANIMATION_DURATION)
        self.anim_widget.setEndValue(total_end_width) # ƒê·∫∑t k√≠ch th∆∞·ªõc t·ªïng th·ªÉ ƒë√≠ch
        self.anim_widget.setEasingCurve(QEasingCurve.InOutCubic)

        # B·∫Øt ƒë·∫ßu ch·∫°y c·∫£ hai hi·ªáu ·ª©ng c√πng m·ªôt l√∫c.
        self.anim_container.start()
        self.anim_widget.start()
        
        # --- B∆Ø·ªöC 4: C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i ---
        
        # ƒê·∫£o ng∆∞·ª£c gi√° tr·ªã c·ªßa bi·∫øn tr·∫°ng th√°i.
        # N·∫øu ƒëang l√† True -> th√†nh False, v√† ng∆∞·ª£c l·∫°i.
        self.is_expanded = not self.is_expanded


    # =========================================================================
    # === CODE FOR MOVING THE WIDGET AROUND ===
    # =========================================================================

    def mousePressEvent(self, event):
        """ This method is called when a mouse button is pressed. [2] """
        if event.button() == Qt.LeftButton:
            print("Mouse pressed on toolbar")
            # Calculate the offset of the mouse click from the window's top-left corner.
            self.drag_position = event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event: QMouseEvent):
        print("Mouse moved on toolbar")
        print(self.drag_position)
        """ This method is called when the mouse is moved while a button is held down. [2] """
        if event.buttons() == Qt.LeftButton:
            # Ensure the drag position is valid.
            if self.drag_position is None:
                print("Drag position is None, cannot move toolbar.")
                self.drag_position = event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            else:
                print(f"Moving toolbar to {event.globalPosition().toPoint() - self.drag_position}")
            # Move the window to the new global mouse position, adjusted by the offset.
            print(event.globalPosition().toPoint())
            self.move(event.globalPosition().toPoint() - self.drag_position)
            event.accept() 
            
    def mouseReleaseEvent(self, event):
        print("Mouse released on toolbar")
        """ This method is called when a mouse button is released. [2] """
        # Reset the drag position to stop the move.
        self.drag_position = None
        event.accept()

    # --- Context menu (unchanged) ---
    def contextMenuEvent(self, event):
        context_menu = QMenu(self)
        quit_action = QAction("Quit", self)
        quit_action.triggered.connect(QApplication.instance().quit)
        context_menu.addAction(quit_action)
        context_menu.exec(event.globalPos())

if __name__ == "__main__":
    app = QApplication(sys.argv)
    toolbar = FloatingToolbar()
    toolbar.show()
    sys.exit(app.exec())
