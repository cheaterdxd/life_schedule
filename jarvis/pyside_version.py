# -*- coding: utf-8 -*-
"""
Tr√¨nh Nh·∫Øc Nh·ªü Ho·∫°t ƒê·ªông & Nhi·ªám v·ª• - Phi√™n b·∫£n Flat UI (PySide6)
-----------------------------------------------------------------
Giao di·ªán ƒë∆∞·ª£c thi·∫øt k·∫ø l·∫°i theo phong c√°ch ph·∫≥ng, hi·ªán ƒë·∫°i s·ª≠ d·ª•ng Qt Style Sheets.
"""
import sys
import os
import time
import datetime
import json
import threading

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
    QDialog, QLineEdit, QComboBox, QMessageBox, QInputDialog, QScrollArea, QFrame
)
from PySide6.QtCore import Qt, QTimer, QTime, Signal
from PySide6.QtGui import QIcon, QFont, QCloseEvent

try:
    from playsound3 import playsound
except ImportError:
    app_temp = QApplication(sys.argv)
    QMessageBox.critical(None, "L·ªói thi·∫øu th∆∞ vi·ªán", "Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán playsound3: pip install playsound3")
    sys.exit(1)

# --- C√°c h·∫±ng s·ªë v√† c·∫•u h√¨nh (Gi·ªØ nguy√™n) ---
DEFAULT_INTERVAL_MINUTES = 15
ACTIVITY_LOG_FILE = "activity_log.json"
SOUND_FILE = "clockbeep.wav"
ALERT_SOUND = "alert.wav"
TODO_FILE_PREFIX = "todolist_"
EMOTION_LABELS = ["Vui", "R·∫•t vui", "H·∫°nh ph√∫c", "H·∫°nh ph√∫c Vi√™n m√£n", "B√¨nh th∆∞·ªùng", "Gi·∫≠n d·ªØ", "S·∫ßu mu·ªôn", "R·ªëi tr√≠", "H·ªï th·∫πn"]
POSITIVE_EMOTIONS = ["Vui", "R·∫•t vui", "H·∫°nh ph√∫c", "H·∫°nh ph√∫c Vi√™n m√£n"]
NEGATIVE_EMOTIONS = ["Gi·∫≠n d·ªØ", "S·∫ßu mu·ªôn", "R·ªëi tr√≠", "H·ªï th·∫πn"]
BEHAVIOR_CATEGORIES = ["Nghi√™n c·ª©u c√≥ √≠ch", "ƒê·ªçc c√≥ √≠ch", "Vi·∫øt c√≥ √≠ch", "N√≥i/ Thuy·∫øt gi·∫£ng c√≥ √≠ch", "Nghi√™n c·ª©u kh√¥ng c√≥ √≠ch", "ƒê·ªçc kh√¥ng c√≥ √≠ch", "Vi·∫øt kh√¥ng c√≥ √≠ch", "N√≥i/ Thuy·∫øt gi·∫£ng kh√¥ng c√≥ √≠ch", "M·∫•t t·∫≠p trung v√†o nhi·ªám v·ª• hi·ªán t·∫°i", "Bu·ªìn ng·ªß khi ƒëang l√†m vi·ªác", "Ch∆°i game"]
PRODUCTIVE_BEHAVIORS = ["Nghi√™n c·ª©u c√≥ √≠ch", "ƒê·ªçc c√≥ √≠ch", "Vi·∫øt c√≥ √≠ch", "N√≥i/ Thuy·∫øt gi·∫£ng c√≥ √≠ch"]
UNPRODUCTIVE_BEHAVIORS = ["Nghi√™n c·ª©u kh√¥ng c√≥ √≠ch", "ƒê·ªçc kh√¥ng c√≥ √≠ch", "Vi·∫øt kh√¥ng c√≥ √≠ch", "N√≥i/ Thuy·∫øt gi·∫£ng kh√¥ng c√≥ √≠ch", "M·∫•t t·∫≠p trung v√†o nhi·ªám v·ª• hi·ªán t·∫°i", "Bu·ªìn ng·ªß khi ƒëang l√†m vi·ªác", "Ch∆°i game"]
# ---------------------------------------------------

# =========================================================================
# === B·∫¢NG KI·ªÇU GIAO DI·ªÜN PH·∫≤NG (FLAT UI STYLESHEET) ===
# =========================================================================
FLAT_STYLE_SHEET = """
    /* --- N·ªÅn chung cho C·ª≠a s·ªï v√† Dialog --- */
    QMainWindow, QDialog {
        background-color: #2c313c;
    }

    /* --- Nh√£n (Label) --- */
    QLabel {
        color: #f0f0f0;
        font-size: 11pt;
    }
    QLabel#StatusLabel { /* Nh√£n tr·∫°ng th√°i ch√≠nh */
        font-size: 14pt;
        font-weight: bold;
    }

    /* --- N√∫t b·∫•m (Button) --- */
    QPushButton {
        color: #f0f0f0;
        background-color: #4a5160;
        border: none;
        padding: 8px 16px;
        font-size: 11pt;
        border-radius: 5px;
    }
    QPushButton:hover {
        background-color: #5b6375;
    }
    QPushButton:pressed {
        background-color: #3e92cc;
    }
    /* C√°c n√∫t ƒë·∫∑c bi·ªát */
    QPushButton#TasksButton {
        background-color: #fca311;
        color: #14213d;
        font-weight: bold;
    }
    QPushButton#TasksButton:hover {
        background-color: #ffb74d;
    }
    QPushButton#StopButton {
        background-color: #c0392b;
    }
    QPushButton#StopButton:hover {
        background-color: #e74c3c;
    }
    QPushButton#SubmitButton {
        background-color: #27ae60;
    }
    QPushButton#SubmitButton:hover {
        background-color: #2ecc71;
    }

    /* --- √î nh·∫≠p li·ªáu (LineEdit) --- */
    QLineEdit {
        background-color: #343b48;
        color: #f0f0f0;
        border: 1px solid #4a5160;
        border-radius: 5px;
        padding: 8px;
        font-size: 11pt;
    }
    QLineEdit:focus {
        border: 1px solid #3e92cc;
    }

    /* --- H·ªôp ch·ªçn (ComboBox) --- */
    QComboBox {
        background-color: #343b48;
        color: #f0f0f0;
        border: 1px solid #4a5160;
        border-radius: 5px;
        padding: 8px;
    }
    QComboBox:hover {
        border: 1px solid #5b6375;
    }
    QComboBox::drop-down {
        border: none;
        width: 20px;
    }
    QComboBox::down-arrow {
        image: url(down_arrow.png); /* B·∫°n c·∫ßn c√≥ file down_arrow.png ho·∫∑c x√≥a d√≤ng n√†y */
    }
    QComboBox QAbstractItemView { /* Ki·ªÉu cho danh s√°ch x·ªï xu·ªëng */
        background-color: #343b48;
        color: #f0f0f0;
        border: 1px solid #4a5160;
        selection-background-color: #3e92cc;
        outline: 0px;
    }

    /* --- Thanh cu·ªôn (ScrollBar) --- */
    QScrollBar:vertical {
        border: none;
        background: #2c313c;
        width: 12px;
        margin: 0px;
    }
    QScrollBar::handle:vertical {
        background: #4a5160;
        min-height: 20px;
        border-radius: 6px;
    }
    QScrollBar::handle:vertical:hover {
        background: #5b6375;
    }
    QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
        height: 0px;
    }
    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
        background: none;
    }

    /* --- V√πng cu·ªôn (ScrollArea) --- */
    QScrollArea {
        border: none;
    }

    /* --- H·ªôp th√¥ng b√°o (MessageBox) --- */
    QMessageBox {
        background-color: #343b48;
    }
    QMessageBox QLabel {
        color: #f0f0f0;
        font-size: 11pt;
    }
"""

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class ReminderApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Tr√¨nh Nh·∫Øc Nh·ªü Ho·∫°t ƒê·ªông & Nhi·ªám v·ª•")
        self.setMinimumSize(500, 220)

        # Tr·∫°ng th√°i
        self.reminder_interval_ms = DEFAULT_INTERVAL_MINUTES * 60 * 1000
        self.sleep_until_time = 0
        self.is_running = True
        self.tasks = []
        self.reminder_timer = QTimer(self)
        self.countdown_timer = QTimer(self)

        # √Çm thanh v√† Icon
        self.sound_path = resource_path(SOUND_FILE)
        self.alert_sound_path = resource_path(ALERT_SOUND)
        icon_path = resource_path("icon.png")
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))

        # Giao di·ªán
        self.setup_ui()

        # Logic
        self.ensure_activity_log_file()
        self.initialize_tasks()

    def setup_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)

        self.status_label = QLabel("ƒêang ch·∫°y...")
        self.status_label.setObjectName("StatusLabel") # ƒê·∫∑t t√™n ƒë·ªÉ style ri√™ng
        self.status_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(self.status_label)

        self.last_check_label = QLabel("Ch∆∞a c√≥ l·∫ßn ki·ªÉm tra ho·∫°t ƒë·ªông n√†o.")
        self.last_check_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(self.last_check_label)

        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)

        sleep_btn = QPushButton("üò¥ ƒêi ng·ªß")
        sleep_btn.clicked.connect(self.go_to_sleep)
        button_layout.addWidget(sleep_btn)

        settings_btn = QPushButton("‚öôÔ∏è C√†i ƒë·∫∑t")
        settings_btn.clicked.connect(self.change_interval)
        button_layout.addWidget(settings_btn)

        tasks_btn = QPushButton("üìù Nhi·ªám v·ª•")
        tasks_btn.setObjectName("TasksButton") # ƒê·∫∑t t√™n ƒë·ªÉ style ri√™ng
        tasks_btn.clicked.connect(self.show_task_window)
        button_layout.addWidget(tasks_btn)

        stop_btn = QPushButton("‚èπÔ∏è D·ª´ng")
        stop_btn.setObjectName("StopButton") # ƒê·∫∑t t√™n ƒë·ªÉ style ri√™ng
        stop_btn.clicked.connect(self.close)
        button_layout.addWidget(stop_btn)

        main_layout.addLayout(button_layout)

    # --- C√°c h√†m logic, kh√¥ng thay ƒë·ªïi so v·ªõi phi√™n b·∫£n tr∆∞·ªõc ---
    # ... (ƒë·ªÉ tr√°nh l·∫∑p l·∫°i, c√°c h√†m n√†y ƒë∆∞·ª£c gi·ªØ nguy√™n nh∆∞ file tr∆∞·ªõc)
    #
    def ensure_activity_log_file(self):
        log_path = resource_path(ACTIVITY_LOG_FILE)
        if not os.path.exists(log_path):
            try:
                with open(log_path, 'w', encoding='utf-8') as f: json.dump([], f)
            except Exception as e:
                QMessageBox.critical(self, "L·ªói File Log", f"Kh√¥ng th·ªÉ t·∫°o file {ACTIVITY_LOG_FILE}:\n{e}")
                self.is_running = False

    def save_log(self, answer, emotion, category):
        log_path = resource_path(ACTIVITY_LOG_FILE)
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        new_entry = {"timestamp": timestamp, "activity": answer, "emotion": emotion, "category": category}
        log_data = []
        if os.path.exists(log_path):
            try:
                with open(log_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if content: log_data = json.loads(content)
            except Exception as e: QMessageBox.warning(self, "L·ªói ƒê·ªçc Log", f"Kh√¥ng th·ªÉ ƒë·ªçc file log:\n{e}")
        log_data.append(new_entry)
        try:
            with open(log_path, 'w', encoding='utf-8') as f: json.dump(log_data, f, ensure_ascii=False, indent=4)
            self.last_check_label.setText(f"L·∫ßn cu·ªëi ki·ªÉm tra l√∫c: {timestamp}")
        except Exception as e: QMessageBox.warning(self, "L·ªói Ghi Log", f"Kh√¥ng th·ªÉ ghi file log:\n{e}")

    def play_sound_in_thread(self, sound_path):
        if os.path.exists(sound_path):
            threading.Thread(target=playsound, args=(sound_path,), daemon=True).start()

    def schedule_next_reminder(self):
        if self.reminder_timer.isActive(): self.reminder_timer.stop()
        if not self.is_running: return
        if time.time() >= self.sleep_until_time:
            self.reminder_timer.setSingleShot(True)
            self.reminder_timer.timeout.connect(self.ask_question)
            self.reminder_timer.start(self.reminder_interval_ms)
            if not self.countdown_timer.isActive(): self.status_label.setText(f"S·∫Ω nh·∫Øc nh·ªü sau {self.reminder_interval_ms // 60000} ph√∫t")
        else:
            wake_up_delay = int((self.sleep_until_time - time.time()) * 1000)
            if wake_up_delay > 0:
                self.reminder_timer.setSingleShot(True)
                self.reminder_timer.timeout.connect(self.schedule_next_reminder)
                self.reminder_timer.start(wake_up_delay + 500)

    def ask_question(self):
        if not self.is_running or time.time() < self.sleep_until_time:
            if self.is_running: self.schedule_next_reminder()
            return
        self.play_sound_in_thread(self.sound_path)
        dlg = AskDialog(self)
        if dlg.exec() == QDialog.Accepted:
            answer, emotion, category = dlg.get_result()
            self.save_log(answer, emotion, category)
        self.schedule_next_reminder()

    def go_to_sleep(self):
        if self.countdown_timer.isActive():
            QMessageBox.information(self, "Th√¥ng b√°o", "ƒêang trong ch·∫ø ƒë·ªô ng·ªß r·ªìi.")
            return
        minutes, ok = QInputDialog.getInt(self, "ƒêi ng·ªß", "B·∫°n mu·ªën ngh·ªâ trong bao nhi√™u ph√∫t?", 15, 1, 1440)
        if ok:
            self.sleep_until_time = time.time() + minutes * 60
            if self.reminder_timer.isActive(): self.reminder_timer.stop()
            self.update_countdown()

    def update_countdown(self):
        remaining = int(self.sleep_until_time - time.time())
        if remaining > 0:
            mins, secs = divmod(remaining, 60)
            self.status_label.setText(f"üò¥ ƒêang ng·ªß: c√≤n {mins:02d}:{secs:02d}")
            self.countdown_timer.setSingleShot(True)
            self.countdown_timer.timeout.connect(self.update_countdown)
            self.countdown_timer.start(1000)
        else:
            self.countdown_timer.stop()
            self.status_label.setText("ƒê√£ th·ª©c d·∫≠y!")
            self.sleep_until_time = 0
            self.schedule_next_reminder()

    def change_interval(self):
        current = self.reminder_interval_ms // 60000
        new_minutes, ok = QInputDialog.getInt(self, "C√†i ƒë·∫∑t th·ªùi gian", f"Nh·∫≠p kho·∫£ng th·ªùi gian (ph√∫t):", current, 1, 120)
        if ok and new_minutes != current:
            self.reminder_interval_ms = new_minutes * 60 * 1000
            if not self.countdown_timer.isActive(): self.schedule_next_reminder()

    def show_task_window(self):
        dlg = TaskWindow(self.tasks, self)
        dlg.task_marked_done.connect(self.mark_task_completed)
        dlg.add_new_task.connect(self.show_task_creation_window)
        dlg.exec()
        self.show_task_window() # M·ªü l·∫°i ƒë·ªÉ refresh sau khi c·ª≠a s·ªï con ƒë√≥ng

    def show_task_creation_window(self):
        dlg = TaskCreationDialog(self)
        if dlg.exec() == QDialog.Accepted:
            new_tasks = dlg.get_new_tasks()
            if new_tasks:
                self.tasks.extend(new_tasks)
                self.save_todolist()
                self.cancel_all_task_alarms()
                self.schedule_task_alarms()

    def mark_task_completed(self, task_to_complete):
        for task in self.tasks:
            if task is task_to_complete and not task.get('completed', False):
                task['completed'] = True
                task['completion_time'] = time.strftime("%Y-%m-%d %H:%M:%S")
                self.cancel_task_alarm(task)
                self.save_todolist()
                return

    def get_recent_activity_logs(self, timeframe_days):
        log_path = resource_path(ACTIVITY_LOG_FILE)
        recent_logs = []
        if not os.path.exists(log_path): return []
        start_time = datetime.datetime.now() - datetime.timedelta(days=timeframe_days)
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                content = f.read()
                log_data = json.loads(content) if content else []
            for entry in log_data:
                try:
                    entry_time = datetime.datetime.strptime(entry.get("timestamp"), "%Y-%m-%d %H:%M:%S")
                    if entry_time >= start_time: recent_logs.append(entry)
                except (ValueError, TypeError): continue
        except Exception as e: print(f"L·ªói ƒë·ªçc log ph√¢n t√≠ch: {e}")
        return recent_logs

    def calculate_behavior_emotion_percentages(self, logs):
        total_logs = len(logs)
        if total_logs == 0: return {'positive_emotion_pct': 0, 'negative_emotion_pct': 0, 'productive_behavior_pct': 0, 'unproductive_behavior_pct': 0, 'total_logs': 0}
        counts = {'pos_emo': 0, 'neg_emo': 0, 'prod_beh': 0, 'unprod_beh': 0}
        for entry in logs:
            if entry.get("emotion") in POSITIVE_EMOTIONS: counts['pos_emo'] += 1
            elif entry.get("emotion") in NEGATIVE_EMOTIONS: counts['neg_emo'] += 1
            if entry.get("category") in PRODUCTIVE_BEHAVIORS: counts['prod_beh'] += 1
            elif entry.get("category") in UNPRODUCTIVE_BEHAVIORS: counts['unprod_beh'] += 1
        return {'positive_emotion_pct': (counts['pos_emo'] / total_logs) * 100, 'negative_emotion_pct': (counts['neg_emo'] / total_logs) * 100, 'productive_behavior_pct': (counts['prod_beh'] / total_logs) * 100, 'unproductive_behavior_pct': (counts['unprod_beh'] / total_logs) * 100, 'total_logs': total_logs}

    def get_performance_indicators(self):
        pct_1day = self.calculate_behavior_emotion_percentages(self.get_recent_activity_logs(1))
        pct_3days = self.calculate_behavior_emotion_percentages(self.get_recent_activity_logs(3))
        overall_negative_1day = pct_1day['negative_emotion_pct'] + pct_1day['unproductive_behavior_pct']
        overall_positive_1day = pct_1day['positive_emotion_pct'] + pct_1day['productive_behavior_pct']
        main_status_icon, main_status_message = "‚ö™", "Ho·∫°t ƒë·ªông c√¢n b·∫±ng."
        if overall_negative_1day > 50: main_status_icon, main_status_message = "üî¥", "Xu h∆∞·ªõng ti√™u c·ª±c/kh√¥ng hi·ªáu qu·∫£."
        elif overall_positive_1day > 50: main_status_icon, main_status_message = "üü¢", "Xu h∆∞·ªõng t√≠ch c·ª±c/hi·ªáu qu·∫£."
        score_1day = overall_positive_1day - overall_negative_1day
        score_3days = (pct_3days['positive_emotion_pct'] + pct_3days['productive_behavior_pct']) - (pct_3days['negative_emotion_pct'] + pct_3days['unproductive_behavior_pct'])
        trend_icon = "‚û°Ô∏è"
        if pct_1day['total_logs'] >= 2 and pct_3days['total_logs'] >= 5:
            if score_1day > score_3days: trend_icon = "‚¨ÜÔ∏è"
            elif score_1day < score_3days: trend_icon = "‚¨áÔ∏è"
        return {'main_status_icon': main_status_icon, 'main_status_message': main_status_message, 'trend_icon': trend_icon}

    def initialize_tasks(self):
        if not self.check_and_load_todolist(): self.play_sound_in_thread(self.alert_sound_path)
        else: self.schedule_task_alarms()
        self.schedule_next_reminder()

    def get_today_todo_filepath(self):
        return resource_path(f"{TODO_FILE_PREFIX}{datetime.date.today().strftime('%Y%m%d')}.json")

    def check_and_load_todolist(self):
        filepath = self.get_today_todo_filepath()
        self.tasks = []
        if not os.path.exists(filepath): return False
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                self.tasks = json.loads(content) if content else []
            for task in self.tasks:
                task.setdefault('completed', False); task.setdefault('completion_time', None); task.setdefault('labels', []); task.setdefault('scheduled_time', task.get('time')); task['alarm_timer'] = None
            self.tasks = [t for t in self.tasks if 'name' in t and 'time' in t]
            return True
        except Exception: return False

    def save_todolist(self):
        filepath = self.get_today_todo_filepath()
        tasks_to_save = [t.copy() for t in self.tasks]
        for task in tasks_to_save: task.pop('alarm_timer', None)
        try:
            with open(filepath, 'w', encoding='utf-8') as f: json.dump(tasks_to_save, f, ensure_ascii=False, indent=4)
        except Exception as e: QMessageBox.critical(self, "L·ªói L∆∞u Nhi·ªám v·ª•", f"Kh√¥ng th·ªÉ ghi file {filepath}:\n{e}")

    def schedule_task_alarms(self):
        now = datetime.datetime.now()
        for task in self.tasks:
            if not task.get('completed', False) and task.get('alarm_timer') is None:
                try:
                    task_dt = datetime.datetime.combine(now.date(), QTime.fromString(task.get('scheduled_time', task.get('time')), "HH:mm").toPython())
                    if task_dt > now:
                        delay_ms = int((task_dt - now).total_seconds() * 1000)
                        timer = QTimer(self); timer.setSingleShot(True); timer.timeout.connect(lambda t=task: self.trigger_task_alarm(t)); timer.start(delay_ms)
                        task['alarm_timer'] = timer
                except Exception as e: print(f"L·ªói l√™n l·ªãch b√°o th·ª©c: {e}")

    def trigger_task_alarm(self, task):
        self.play_sound_in_thread(self.sound_path)
        QMessageBox.information(self, "‚è∞ B√°o th·ª©c Nhi·ªám v·ª•", f"ƒê√£ ƒë·∫øn gi·ªù th·ª±c hi·ªán:\n\n{task.get('name')}")
        task['alarm_timer'] = None

    def cancel_task_alarm(self, task):
        if task.get('alarm_timer') and task['alarm_timer'].isActive():
            task['alarm_timer'].stop(); task['alarm_timer'] = None

    def cancel_all_task_alarms(self):
        for task in self.tasks: self.cancel_task_alarm(task)

    def closeEvent(self, event: QCloseEvent):
        self.is_running = False
        if self.reminder_timer.isActive(): self.reminder_timer.stop()
        if self.countdown_timer.isActive(): self.countdown_timer.stop()
        self.cancel_all_task_alarms()
        event.accept()

# --- C√°c Dialog t√πy ch·ªânh (ƒê∆∞·ª£c style l·∫°i) ---
class AskDialog(QDialog):
    def __init__(self, parent: ReminderApp):
        super().__init__(parent)
        self.parent_app = parent
        self.setWindowTitle("Nh·∫≠p Ho·∫°t ƒë·ªông & Tr·∫°ng th√°i")
        self.setModal(True)
        self.setMinimumSize(600, 450)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        indicators = self.parent_app.get_performance_indicators()
        indicator_label = QLabel(f"{indicators['main_status_icon']} {indicators['main_status_message']} {indicators['trend_icon']}")
        indicator_label.setFont(QFont("Helvetica", 14)); indicator_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(indicator_label)

        interval_min = self.parent_app.reminder_interval_ms // 60000
        layout.addWidget(QLabel(f"B·∫°n ƒë√£ l√†m g√¨ trong {interval_min} ph√∫t qua?"))
        self.entry_activity = QLineEdit(); layout.addWidget(self.entry_activity)

        layout.addWidget(QLabel("C·∫£m x√∫c c·ªßa b·∫°n:"))
        self.combo_emotion = QComboBox(); self.combo_emotion.addItems(EMOTION_LABELS); layout.addWidget(self.combo_emotion)

        layout.addWidget(QLabel("Ph√¢n lo·∫°i h√†nh vi:"))
        self.combo_category = QComboBox(); self.combo_category.addItems(BEHAVIOR_CATEGORIES); layout.addWidget(self.combo_category)

        self.submit_button = QPushButton("X√°c nh·∫≠n"); self.submit_button.setObjectName("SubmitButton")
        self.submit_button.clicked.connect(self.custom_accept)
        layout.addSpacing(10); layout.addWidget(self.submit_button)
        self.entry_activity.setFocus()

    def custom_accept(self):
        if not self.entry_activity.text().strip(): return
        self.accept()

    def get_result(self):
        return (self.entry_activity.text().strip(), self.combo_emotion.currentText(), self.combo_category.currentText())

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape: return
        elif event.key() in [Qt.Key_Return, Qt.Key_Enter]: self.custom_accept()
        else: super().keyPressEvent(event)

class TaskWindow(QDialog):
    task_marked_done = Signal(dict); add_new_task = Signal()
    def __init__(self, tasks, parent=None):
        super().__init__(parent)
        self.tasks = tasks
        self.setWindowTitle(f"Nhi·ªám v·ª• h√¥m nay ({datetime.date.today().strftime('%d/%m/%Y')})")
        self.setMinimumSize(600, 500)
        self.setup_ui()

    def setup_ui(self):
        main_layout = QVBoxLayout(self); main_layout.setContentsMargins(10, 10, 10, 10)
        btn_layout = QHBoxLayout()
        add_button = QPushButton("‚ûï Th√™m Nhi·ªám v·ª•"); add_button.clicked.connect(self.add_new_task.emit); add_button.clicked.connect(self.accept)
        btn_layout.addWidget(add_button); btn_layout.addStretch()
        main_layout.addLayout(btn_layout)

        scroll = QScrollArea(); scroll.setWidgetResizable(True); main_layout.addWidget(scroll)
        content_widget = QWidget(); scroll.setWidget(content_widget)
        vbox = QVBoxLayout(content_widget)

        if not self.tasks: vbox.addWidget(QLabel("Ch∆∞a c√≥ nhi·ªám v·ª• n√†o cho h√¥m nay."))
        for task in self.tasks:
            task_frame = QFrame()
            task_layout = QHBoxLayout(task_frame)
            status = "‚úÖ" if task.get('completed', False) else "‚¨ú"
            task_text = f"{status} {task.get('time')} - {task.get('name')}"
            labels_text = ", ".join(task.get('labels', []))
            if labels_text: task_text += f"  [{labels_text}]"
            label = QLabel(task_text)
            if task.get('completed', False):
                font = label.font(); font.setStrikeOut(True); label.setFont(font); label.setStyleSheet("color: #888;")
            task_layout.addWidget(label); task_layout.addStretch()
            if not task.get('completed', False):
                btn = QPushButton("‚úì"); btn.setFixedWidth(50)
                btn.clicked.connect(lambda _, t=task: self.task_marked_done.emit(t))
                task_layout.addWidget(btn)
            vbox.addWidget(task_frame)
        vbox.addStretch()
        close_button = QPushButton("ƒê√≥ng"); close_button.clicked.connect(self.accept); main_layout.addWidget(close_button)

class TaskCreationDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._temp_tasks_to_add = []
        self.setWindowTitle("T·∫°o Nhi·ªám v·ª• m·ªõi"); self.setMinimumWidth(400)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self); layout.setSpacing(10); layout.setContentsMargins(20, 20, 20, 20)
        layout.addWidget(QLabel("T√™n Nhi·ªám v·ª•:")); self.name_entry = QLineEdit(); self.name_entry.setFocus(); layout.addWidget(self.name_entry)
        layout.addWidget(QLabel("Th·ªùi gian (HH:MM):")); self.time_entry = QLineEdit(); self.time_entry.setInputMask("99:99"); layout.addWidget(self.time_entry)
        layout.addWidget(QLabel("Nh√£n (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y):")); self.labels_entry = QLineEdit(); layout.addWidget(self.labels_entry)
        add_btn = QPushButton("‚ûï Th√™m v√†o danh s√°ch"); add_btn.clicked.connect(self.add_task_to_temp_list); layout.addWidget(add_btn)
        self.temp_list_label = QLabel("Ch∆∞a c√≥ nhi·ªám v·ª• n√†o ƒë∆∞·ª£c th√™m."); layout.addWidget(self.temp_list_label)
        btn_layout = QHBoxLayout(); save_btn = QPushButton("üíæ L∆∞u"); save_btn.setObjectName("SubmitButton"); save_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("‚ùå H·ªßy"); cancel_btn.setObjectName("StopButton"); cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(save_btn); btn_layout.addWidget(cancel_btn); layout.addLayout(btn_layout)

    def add_task_to_temp_list(self):
        name = self.name_entry.text().strip(); time_str = self.time_entry.text().strip()
        if not name or not time_str: return
        labels = [label.strip() for label in self.labels_entry.text().strip().split(',') if label.strip()]
        self._temp_tasks_to_add.append({'name': name, 'time': time_str, 'scheduled_time': time_str, 'completed': False, 'completion_time': None, 'labels': labels})
        self.name_entry.clear(); self.time_entry.clear(); self.labels_entry.clear(); self.name_entry.setFocus()
        self.temp_list_label.setText(f"ƒê√£ th√™m {len(self._temp_tasks_to_add)} nhi·ªám v·ª•.")

    def get_new_tasks(self):
        return self._temp_tasks_to_add

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyleSheet(FLAT_STYLE_SHEET) # √Åp d·ª•ng style cho to√†n b·ªô ·ª©ng d·ª•ng
    window = ReminderApp()
    window.show()
    sys.exit(app.exec())
